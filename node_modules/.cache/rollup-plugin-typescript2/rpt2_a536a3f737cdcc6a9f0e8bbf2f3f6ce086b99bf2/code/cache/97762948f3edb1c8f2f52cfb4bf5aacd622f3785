{"code":"export {};\r\n//# sourceMappingURL=tooltip.js.map","references":["F:/Ismart/S2-master/node_modules/@antv/g-canvas/lib/index.d.ts","F:/Ismart/S2-master/packages/s2-core/src/sheet-type/index.ts","F:/Ismart/S2-master/packages/s2-core/src/common/interface/index.ts","F:/Ismart/S2-master/packages/s2-core/src/ui/tooltip/index.ts"],"map":"{\"version\":3,\"file\":\"tooltip.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/common/interface/tooltip.ts\"],\"names\":[],\"mappings\":\"\"}","dts":{"name":"F:/Ismart/S2-master/packages/s2-core/node_modules/.cache/rollup-plugin-typescript2/placeholder/common/interface/tooltip.d.ts","writeByteOrderMark":false,"text":"import type { Event as CanvasEvent } from '@antv/g-canvas';\r\nimport type { SpreadSheet } from \"../../sheet-type\";\r\nimport type { S2CellType, SortParam } from \"./\";\r\nimport type { BaseTooltip } from \"../../ui/tooltip\";\r\nexport declare type TooltipDataItem = Record<string, any>;\r\nexport interface TooltipOperatorMenu {\r\n    key: string;\r\n    icon?: Element | string;\r\n    text?: string;\r\n    onClick?: (cell: S2CellType) => void;\r\n    visible?: boolean | ((cell: S2CellType) => boolean);\r\n    children?: TooltipOperatorMenu[];\r\n}\r\nexport interface TooltipOperatorOptions {\r\n    onClick?: (...args: unknown[]) => void;\r\n    menus?: TooltipOperatorMenu[];\r\n}\r\nexport interface TooltipPosition {\r\n    x: number;\r\n    y: number;\r\n}\r\nexport declare type ListItem = {\r\n    name: string;\r\n    value: string | number;\r\n    icon?: Element | string;\r\n};\r\nexport interface SortQuery {\r\n    [key: string]: string;\r\n}\r\nexport interface TooltipOptions {\r\n    hideSummary?: boolean;\r\n    operator?: TooltipOperatorOptions;\r\n    enterable?: boolean;\r\n    isTotals?: boolean;\r\n    showSingleTips?: boolean;\r\n    onlyMenu?: boolean;\r\n    enableFormat?: boolean;\r\n}\r\nexport interface TooltipSummaryOptions {\r\n    name: string;\r\n    value: number | string;\r\n    selectedData: TooltipDataItem[];\r\n}\r\nexport interface TooltipNameTipsOptions {\r\n    name?: string;\r\n    tips?: string;\r\n}\r\nexport interface TooltipOperationOptions {\r\n    plot: SpreadSheet;\r\n    sortFieldId: string;\r\n    sortQuery: SortQuery;\r\n}\r\nexport interface TooltipOperationState {\r\n    sortParam: SortParam;\r\n}\r\nexport declare type TooltipDetailProps = {\r\n    list: ListItem[];\r\n};\r\nexport declare type TooltipInterpretationOptions = {\r\n    name: string;\r\n    icon?: Element | string;\r\n    text?: string;\r\n    render?: Element | string;\r\n};\r\nexport declare type TooltipShowOptions<T = TooltipContentType> = {\r\n    position: TooltipPosition;\r\n    data?: TooltipData;\r\n    cellInfos?: TooltipDataItem[];\r\n    options?: TooltipOptions;\r\n    content?: ((cell: S2CellType, defaultTooltipShowOptions: TooltipShowOptions<T>) => T) | T;\r\n    event?: CanvasEvent | MouseEvent;\r\n};\r\nexport declare type TooltipData = {\r\n    summaries?: TooltipSummaryOptions[];\r\n    details?: ListItem[];\r\n    headInfo?: TooltipHeadInfo;\r\n    name?: string;\r\n    tips?: string;\r\n    infos?: string;\r\n    interpretation?: TooltipInterpretationOptions;\r\n    colIndex?: number;\r\n    rowIndex?: number;\r\n};\r\nexport declare type TooltipHeadInfo = {\r\n    rows: ListItem[];\r\n    cols: ListItem[];\r\n};\r\nexport declare type DataParam = {\r\n    spreadsheet: SpreadSheet;\r\n    options?: TooltipOptions;\r\n    isHeader?: boolean;\r\n    getShowValue?: (selectedData: TooltipDataItem[], valueField: string) => string | number;\r\n};\r\nexport declare type IconProps = {\r\n    icon: Element | string;\r\n    [key: string]: unknown;\r\n};\r\nexport interface SummaryProps {\r\n    summaries: TooltipSummaryOptions[];\r\n}\r\nexport interface SummaryParam extends DataParam {\r\n    cellInfos?: TooltipDataItem[];\r\n}\r\nexport interface TooltipDataParam extends DataParam {\r\n    cellInfos: TooltipDataItem[];\r\n}\r\nexport interface OrderOption {\r\n    sortMethod: 'ASC' | 'DESC';\r\n    type: 'globalAsc' | 'globalDesc' | 'groupAsc' | 'groupDesc' | 'none';\r\n    name: string;\r\n}\r\nexport declare type TooltipAutoAdjustBoundary = 'body' | 'container';\r\nexport declare type TooltipContentType = Element | string;\r\nexport interface BaseTooltipConfig<T = TooltipContentType> {\r\n    readonly showTooltip?: boolean;\r\n    readonly content?: TooltipShowOptions<T>['content'];\r\n    readonly operation?: TooltipOperation;\r\n    readonly autoAdjustBoundary?: TooltipAutoAdjustBoundary;\r\n    readonly renderTooltip?: (spreadsheet: SpreadSheet) => BaseTooltip;\r\n    readonly getContainer?: () => HTMLElement;\r\n}\r\nexport interface Tooltip<T = TooltipContentType> extends BaseTooltipConfig<T> {\r\n    readonly row?: BaseTooltipConfig<T>;\r\n    readonly col?: BaseTooltipConfig<T>;\r\n    readonly corner?: BaseTooltipConfig<T>;\r\n    readonly data?: BaseTooltipConfig<T>;\r\n}\r\nexport interface TooltipOperation extends TooltipOperatorOptions {\r\n    hiddenColumns?: boolean;\r\n    trend?: boolean;\r\n    sort?: boolean;\r\n    tableSort?: boolean;\r\n}\r\nexport interface AutoAdjustPositionOptions {\r\n    position: TooltipPosition;\r\n    tooltipContainer: HTMLElement;\r\n    spreadsheet: SpreadSheet;\r\n    autoAdjustBoundary: TooltipAutoAdjustBoundary;\r\n}\r\n"}}
