{"code":"import { __read, __spreadArray } from \"tslib\";\r\nimport { omit, isEqual } from 'lodash';\r\nimport { ROOT_ID } from \"../../common/constant/basic\";\r\n/**\r\n * Node for cornerHeader, colHeader, rowHeader\r\n */\r\nvar Node = /** @class */ (function () {\r\n    function Node(cfg) {\r\n        // node top-left x-coordinate\r\n        this.x = 0;\r\n        // node top-left y-coordinate\r\n        this.y = 0;\r\n        // node width\r\n        this.width = 0;\r\n        // node height\r\n        this.height = 0;\r\n        // cell index in layout list(TODO What's use for?)\r\n        this.colIndex = -1;\r\n        // node's level in tree hierarchy\r\n        this.level = 0;\r\n        // check if node is leaf(the max level in tree)\r\n        this.isLeaf = false;\r\n        // node's children\r\n        this.children = [];\r\n        // node width adaptive mode need paddingLeft = paddingRight\r\n        this.padding = 0;\r\n        var id = cfg.id, key = cfg.key, value = cfg.value, label = cfg.label, parent = cfg.parent, level = cfg.level, rowIndex = cfg.rowIndex, isTotals = cfg.isTotals, isGrandTotals = cfg.isGrandTotals, isSubTotals = cfg.isSubTotals, isCollapsed = cfg.isCollapsed, hierarchy = cfg.hierarchy, isPivotMode = cfg.isPivotMode, seriesNumberWidth = cfg.seriesNumberWidth, field = cfg.field, spreadsheet = cfg.spreadsheet, query = cfg.query, belongsCell = cfg.belongsCell, inCollapseNode = cfg.inCollapseNode, isTotalMeasure = cfg.isTotalMeasure, isLeaf = cfg.isLeaf, extra = cfg.extra;\r\n        this.id = id;\r\n        this.key = key;\r\n        this.value = value;\r\n        this.label = label || value;\r\n        this.parent = parent;\r\n        this.level = level;\r\n        this.rowIndex = rowIndex;\r\n        this.isTotals = isTotals;\r\n        this.isCollapsed = isCollapsed;\r\n        this.hierarchy = hierarchy;\r\n        this.isPivotMode = isPivotMode;\r\n        this.seriesNumberWidth = seriesNumberWidth;\r\n        this.field = field;\r\n        this.spreadsheet = spreadsheet;\r\n        this.query = query;\r\n        this.belongsCell = belongsCell;\r\n        this.inCollapseNode = inCollapseNode;\r\n        this.isTotalMeasure = isTotalMeasure;\r\n        this.isLeaf = isLeaf;\r\n        this.isGrandTotals = isGrandTotals;\r\n        this.isSubTotals = isSubTotals;\r\n        this.config = {\r\n            x: 0,\r\n            y: 0,\r\n            width: 0,\r\n            height: 0,\r\n            colIndex: -1,\r\n            children: [],\r\n            padding: 0,\r\n            id: '',\r\n            key: '',\r\n            value: '',\r\n            label: '',\r\n        };\r\n        this.extra = extra;\r\n    }\r\n    /**\r\n     * Get node's field path\r\n     * eg: node.id = root[&]东北[&]黑龙江\r\n     * => [area, province]\r\n     * @param node\r\n     */\r\n    Node.getFieldPath = function (node, isDrillDown) {\r\n        if ((node && !node.isTotals) || (node && isDrillDown)) {\r\n            // total nodes don't need rows from node self except in drill down mode\r\n            var parent_1 = node.parent;\r\n            var fieldPath = [node.field];\r\n            while (parent_1 && parent_1.id !== ROOT_ID) {\r\n                fieldPath.push(parent_1.field);\r\n                parent_1 = parent_1.parent;\r\n            }\r\n            return fieldPath.reverse();\r\n        }\r\n        return [];\r\n    };\r\n    /**\r\n     * Get all leaves in this node branch, eg:\r\n     *        c1\r\n     *    b1〈\r\n     *        c2\r\n     * a〈\r\n     *        c3\r\n     *    b2〈\r\n     *        c4\r\n     * get a branch's all leaves(c1~c4)\r\n     * @param node\r\n     */\r\n    Node.getAllLeavesOfNode = function (node) {\r\n        var leaves = [];\r\n        if (node.isLeaf) {\r\n            return [node];\r\n        }\r\n        // current root node children\r\n        var nodes = __spreadArray([], __read(node.children), false);\r\n        var current = nodes.shift();\r\n        while (current) {\r\n            if (current.isLeaf) {\r\n                leaves.push(current);\r\n            }\r\n            else {\r\n                nodes.unshift.apply(nodes, __spreadArray([], __read(current.children), false));\r\n            }\r\n            current = nodes.shift();\r\n        }\r\n        return leaves;\r\n    };\r\n    /**\r\n     * Get all children nodes in this node branch, eg:\r\n     *        c1\r\n     *    b1〈\r\n     *        c2\r\n     * a〈\r\n     *        c3\r\n     *    b2〈\r\n     *        c4\r\n     * get a branch's all nodes(c1~c4, b1, b2)\r\n     * @param node\r\n     */\r\n    Node.getAllChildrenNode = function (node) {\r\n        var all = [];\r\n        if (node.isLeaf) {\r\n            return [node];\r\n        }\r\n        // current root node children\r\n        var nodes = __spreadArray([], __read((node.children || [])), false);\r\n        var current = nodes.shift();\r\n        while (current) {\r\n            all.push(current);\r\n            nodes.unshift.apply(nodes, __spreadArray([], __read(current.children), false));\r\n            current = nodes.shift();\r\n        }\r\n        return all;\r\n    };\r\n    /**\r\n     * Get all children branch in this node branch, eg:\r\n     *        c1\r\n     *    b1〈\r\n     *        c2\r\n     * a〈\r\n     *        c3\r\n     *    b2〈\r\n     *        c4\r\n     * get all branch [[b1,c1],[b1,c2],[b2,c3],[b2,c4]]\r\n     * @param parent\r\n     */\r\n    Node.getAllBranch = function (parent) {\r\n        var all = [];\r\n        var leaves = this.getAllLeavesOfNode(parent);\r\n        var current = leaves.shift();\r\n        var tempBranch = [];\r\n        while (current) {\r\n            tempBranch.unshift(current);\r\n            var pa = current.parent;\r\n            while (pa) {\r\n                if (!isEqual(pa, parent)) {\r\n                    tempBranch.unshift(pa);\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n                pa = pa.parent;\r\n            }\r\n            all.push(tempBranch);\r\n            current = leaves.shift();\r\n            tempBranch = [];\r\n        }\r\n        return all;\r\n    };\r\n    Node.blankNode = function () {\r\n        return new Node({\r\n            id: '',\r\n            key: '',\r\n            value: '',\r\n        });\r\n    };\r\n    Node.rootNode = function () {\r\n        return new Node({\r\n            id: 'root',\r\n            key: '',\r\n            value: '',\r\n        });\r\n    };\r\n    Node.prototype.toJSON = function () {\r\n        return omit(this, ['config', 'hierarchy', 'parent', 'spreadsheet']);\r\n    };\r\n    return Node;\r\n}());\r\nexport { Node };\r\n//# sourceMappingURL=node.js.map","references":["F:/Ismart/S2-master/node_modules/@types/lodash/index.d.ts","F:/Ismart/S2-master/packages/s2-core/src/facet/layout/hierarchy.ts","F:/Ismart/S2-master/packages/s2-core/src/common/constant/basic.ts","F:/Ismart/S2-master/packages/s2-core/src/sheet-type/index.ts","F:/Ismart/S2-master/packages/s2-core/src/common/interface/index.ts","F:/Ismart/S2-master/packages/s2-core/src/common/interface/node.ts"],"map":"{\"version\":3,\"file\":\"node.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/facet/layout/node.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"F:/Ismart/S2-master/packages/s2-core/node_modules/.cache/rollup-plugin-typescript2/placeholder/facet/layout/node.d.ts","writeByteOrderMark":false,"text":"/// <reference types=\"lodash\" />\r\nimport { Hierarchy } from './hierarchy';\r\nimport { SpreadSheet } from \"../../sheet-type\";\r\nimport { S2CellType } from \"../../common/interface\";\r\nimport { CornerNodeType } from \"../../common/interface/node\";\r\nexport interface BaseNodeConfig {\r\n    id: string;\r\n    key: string;\r\n    value: string;\r\n    label?: string;\r\n    level?: number;\r\n    rowIndex?: number;\r\n    colIndex?: number;\r\n    parent?: Node;\r\n    isTotals?: boolean;\r\n    isSubTotals?: boolean;\r\n    isCollapsed?: boolean;\r\n    isGrandTotals?: boolean;\r\n    hierarchy?: Hierarchy;\r\n    isPivotMode?: boolean;\r\n    seriesNumberWidth?: number;\r\n    field?: string;\r\n    spreadsheet?: SpreadSheet;\r\n    query?: Record<string, any>;\r\n    belongsCell?: S2CellType;\r\n    isTotalMeasure?: boolean;\r\n    inCollapseNode?: boolean;\r\n    isLeaf?: boolean;\r\n    x?: number;\r\n    y?: number;\r\n    width?: number;\r\n    height?: number;\r\n    padding?: number;\r\n    children?: Node[];\r\n    extra?: Record<string, any>;\r\n}\r\n/**\r\n * Node for cornerHeader, colHeader, rowHeader\r\n */\r\nexport declare class Node {\r\n    isTotalMeasure: boolean;\r\n    config: BaseNodeConfig;\r\n    constructor(cfg: BaseNodeConfig);\r\n    /**\r\n     * Get node's field path\r\n     * eg: node.id = root[&]东北[&]黑龙江\r\n     * => [area, province]\r\n     * @param node\r\n     */\r\n    static getFieldPath(node: Node, isDrillDown?: boolean): string[];\r\n    /**\r\n     * Get all leaves in this node branch, eg:\r\n     *        c1\r\n     *    b1〈\r\n     *        c2\r\n     * a〈\r\n     *        c3\r\n     *    b2〈\r\n     *        c4\r\n     * get a branch's all leaves(c1~c4)\r\n     * @param node\r\n     */\r\n    static getAllLeavesOfNode(node: Node): Node[];\r\n    /**\r\n     * Get all children nodes in this node branch, eg:\r\n     *        c1\r\n     *    b1〈\r\n     *        c2\r\n     * a〈\r\n     *        c3\r\n     *    b2〈\r\n     *        c4\r\n     * get a branch's all nodes(c1~c4, b1, b2)\r\n     * @param node\r\n     */\r\n    static getAllChildrenNode(node: Node): Node[];\r\n    /**\r\n     * Get all children branch in this node branch, eg:\r\n     *        c1\r\n     *    b1〈\r\n     *        c2\r\n     * a〈\r\n     *        c3\r\n     *    b2〈\r\n     *        c4\r\n     * get all branch [[b1,c1],[b1,c2],[b2,c3],[b2,c4]]\r\n     * @param parent\r\n     */\r\n    static getAllBranch(parent: Node): Node[][];\r\n    id: string;\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n    height: number;\r\n    label: string;\r\n    key: string;\r\n    value: string;\r\n    colIndex: number;\r\n    level: number;\r\n    rowIndex: number;\r\n    parent: Node;\r\n    isLeaf: boolean;\r\n    isTotals: boolean;\r\n    colId: string;\r\n    static blankNode(): Node;\r\n    isCollapsed: boolean;\r\n    children: Node[];\r\n    padding: number;\r\n    hierarchy: Hierarchy;\r\n    isPivotMode: boolean;\r\n    seriesNumberWidth: number;\r\n    field: string;\r\n    spreadsheet: SpreadSheet;\r\n    query?: Record<string, any>;\r\n    belongsCell?: S2CellType;\r\n    inCollapseNode?: boolean;\r\n    cornerType?: CornerNodeType;\r\n    isGrandTotals?: boolean;\r\n    isSubTotals?: boolean;\r\n    [key: string]: any;\r\n    static rootNode(): Node;\r\n    toJSON(): import(\"lodash\").Omit<this, \"config\" | \"parent\" | \"hierarchy\" | \"spreadsheet\">;\r\n}\r\n"}}
