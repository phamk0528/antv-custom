{"code":"import { __extends } from \"tslib\";\r\nimport { each } from 'lodash';\r\nimport { BaseHeader } from './base';\r\nimport { translateGroupX } from \"../utils\";\r\nimport { KEY_GROUP_COL_SCROLL, FRONT_GROUND_GROUP_COL_SCROLL_Z_INDEX, } from \"../../common/constant\";\r\nimport { ColCell } from \"../../cell\";\r\n/**\r\n * Column Header for SpreadSheet\r\n */\r\nvar ColHeader = /** @class */ (function (_super) {\r\n    __extends(ColHeader, _super);\r\n    function ColHeader(cfg) {\r\n        var _this = _super.call(this, cfg) || this;\r\n        _this.scrollGroup = _this.addGroup({\r\n            name: KEY_GROUP_COL_SCROLL,\r\n            zIndex: FRONT_GROUND_GROUP_COL_SCROLL_Z_INDEX,\r\n        });\r\n        return _this;\r\n    }\r\n    /**\r\n     * Make colHeader scroll with hScrollBar\r\n     * @param scrollX horizontal offset\r\n     * @param cornerWidth only has real meaning when scroll contains rowCell\r\n     * @param type\r\n     */\r\n    ColHeader.prototype.onColScroll = function (scrollX, type) {\r\n        if (this.headerConfig.scrollX !== scrollX) {\r\n            this.headerConfig.scrollX = scrollX;\r\n            this.render(type);\r\n        }\r\n    };\r\n    ColHeader.prototype.clip = function () {\r\n        var _a = this.headerConfig, width = _a.width, height = _a.height, scrollX = _a.scrollX, spreadsheet = _a.spreadsheet;\r\n        var isFrozenRowHeader = spreadsheet.isFrozenRowHeader();\r\n        this.scrollGroup.setClip({\r\n            type: 'rect',\r\n            attrs: {\r\n                x: isFrozenRowHeader ? scrollX : 0,\r\n                y: 0,\r\n                width: isFrozenRowHeader ? width : width + scrollX,\r\n                height: height,\r\n            },\r\n        });\r\n    };\r\n    ColHeader.prototype.clear = function () {\r\n        var _a, _b;\r\n        (_a = this.scrollGroup) === null || _a === void 0 ? void 0 : _a.clear();\r\n        (_b = this.background) === null || _b === void 0 ? void 0 : _b.remove(true);\r\n    };\r\n    ColHeader.prototype.getCellInstance = function (item, spreadsheet, headerConfig) {\r\n        return new ColCell(item, spreadsheet, headerConfig);\r\n    };\r\n    ColHeader.prototype.getCellGroup = function (node) {\r\n        return this.scrollGroup;\r\n    };\r\n    ColHeader.prototype.isColCellInRect = function (item) {\r\n        var _a = this.headerConfig, spreadsheet = _a.spreadsheet, cornerWidth = _a.cornerWidth, width = _a.width, scrollX = _a.scrollX;\r\n        return (\r\n        // don't care about scrollY, because there is only freeze col-header exist\r\n        width + scrollX > item.x &&\r\n            scrollX - (spreadsheet.isFrozenRowHeader() ? 0 : cornerWidth) <\r\n                item.x + item.width);\r\n    };\r\n    ColHeader.prototype.layout = function () {\r\n        var _this = this;\r\n        var _a = this.headerConfig, data = _a.data, spreadsheet = _a.spreadsheet;\r\n        var colCell = spreadsheet.options.colCell;\r\n        each(data, function (node) {\r\n            var item = node;\r\n            if (_this.isColCellInRect(item)) {\r\n                var cell = (colCell === null || colCell === void 0 ? void 0 : colCell(item, spreadsheet, _this.headerConfig)) ||\r\n                    _this.getCellInstance(item, spreadsheet, _this.headerConfig);\r\n                item.belongsCell = cell;\r\n                var group = _this.getCellGroup(item);\r\n                group.add(cell);\r\n            }\r\n        });\r\n    };\r\n    ColHeader.prototype.offset = function () {\r\n        var _a = this.headerConfig, position = _a.position, scrollX = _a.scrollX;\r\n        // 暂时不考虑移动y\r\n        translateGroupX(this.scrollGroup, position.x - scrollX);\r\n    };\r\n    return ColHeader;\r\n}(BaseHeader));\r\nexport { ColHeader };\r\n//# sourceMappingURL=col.js.map","references":["F:/Ismart/S2-master/node_modules/@types/lodash/index.d.ts","F:/Ismart/S2-master/node_modules/@antv/g-canvas/lib/index.d.ts","F:/Ismart/S2-master/packages/s2-core/src/facet/header/base.ts","F:/Ismart/S2-master/packages/s2-core/src/facet/utils.ts","F:/Ismart/S2-master/packages/s2-core/src/common/constant/index.ts","F:/Ismart/S2-master/packages/s2-core/src/cell/index.ts","F:/Ismart/S2-master/packages/s2-core/src/facet/layout/node.ts","F:/Ismart/S2-master/packages/s2-core/src/sheet-type/index.ts"],"map":"{\"version\":3,\"file\":\"col.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/facet/header/col.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"F:/Ismart/S2-master/packages/s2-core/node_modules/.cache/rollup-plugin-typescript2/placeholder/facet/header/col.d.ts","writeByteOrderMark":false,"text":"import type { IGroup, IShape } from '@antv/g-canvas';\r\nimport { BaseHeader, BaseHeaderConfig } from './base';\r\nimport { ColCell } from \"../../cell\";\r\nimport { Node } from \"../layout/node\";\r\nimport { SpreadSheet } from \"../../sheet-type/index\";\r\nexport interface ColHeaderConfig extends BaseHeaderConfig {\r\n    cornerWidth?: number;\r\n    scrollContainsRowHeader?: boolean;\r\n}\r\n/**\r\n * Column Header for SpreadSheet\r\n */\r\nexport declare class ColHeader extends BaseHeader<ColHeaderConfig> {\r\n    protected scrollGroup: IGroup;\r\n    protected background: IShape;\r\n    constructor(cfg: ColHeaderConfig);\r\n    /**\r\n     * Make colHeader scroll with hScrollBar\r\n     * @param scrollX horizontal offset\r\n     * @param cornerWidth only has real meaning when scroll contains rowCell\r\n     * @param type\r\n     */\r\n    onColScroll(scrollX: number, type: string): void;\r\n    protected clip(): void;\r\n    clear(): void;\r\n    protected getCellInstance(item: Node, spreadsheet: SpreadSheet, headerConfig: ColHeaderConfig): ColCell;\r\n    protected getCellGroup(node: Node): IGroup;\r\n    protected isColCellInRect(item: Node): boolean;\r\n    protected layout(): void;\r\n    protected offset(): void;\r\n}\r\n"}}
