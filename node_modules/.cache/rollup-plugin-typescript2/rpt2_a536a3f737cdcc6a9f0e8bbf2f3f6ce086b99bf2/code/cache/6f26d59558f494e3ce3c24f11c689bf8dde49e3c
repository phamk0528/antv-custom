{"code":"import { __assign, __read, __values } from \"tslib\";\r\nimport { includes, isBoolean } from 'lodash';\r\nimport { TotalClass } from \"../../facet/layout/total-class\";\r\nimport { TotalMeasure } from \"../../facet/layout/total-measure\";\r\nimport { i18n } from \"../../common/i18n\";\r\nimport { EXTRA_FIELD } from \"../../common/constant\";\r\nimport { generateId } from \"./generate-id\";\r\nimport { Node } from \"../../facet/layout/node\";\r\nimport { layoutHierarchy } from \"../../facet/layout/layout-hooks\";\r\nimport { buildGridHierarchy } from \"../../facet/layout/build-gird-hierarchy\";\r\nexport var generateHeaderNodes = function (params) {\r\n    var e_1, _a, _b, _c, _d, _e;\r\n    var _f, _g, _h;\r\n    var currentField = params.currentField, fields = params.fields, fieldValues = params.fieldValues, facetCfg = params.facetCfg, hierarchy = params.hierarchy, parentNode = params.parentNode, level = params.level, query = params.query, addMeasureInTotalQuery = params.addMeasureInTotalQuery, addTotalMeasureInTotal = params.addTotalMeasureInTotal;\r\n    var spreadsheet = facetCfg.spreadsheet, collapsedCols = facetCfg.collapsedCols, colCfg = facetCfg.colCfg;\r\n    try {\r\n        for (var _j = __values(fieldValues.entries()), _k = _j.next(); !_k.done; _k = _j.next()) {\r\n            var _l = __read(_k.value, 2), index = _l[0], fieldValue = _l[1];\r\n            var isTotals = fieldValue instanceof TotalClass;\r\n            var isTotalMeasure = fieldValue instanceof TotalMeasure;\r\n            var value = void 0;\r\n            var nodeQuery = void 0;\r\n            var isLeaf = false;\r\n            var isGrandTotals = false;\r\n            var isSubTotals = false;\r\n            var adjustedField = currentField;\r\n            if (isTotals) {\r\n                var totalClass = fieldValue;\r\n                isGrandTotals = totalClass.isGrandTotals;\r\n                isSubTotals = totalClass.isSubTotals;\r\n                value = i18n(fieldValue.label);\r\n                if (addMeasureInTotalQuery) {\r\n                    // root[&]四川[&]总计 => {province: '四川', EXTRA_FIELD: 'price'}\r\n                    nodeQuery = __assign(__assign({}, query), (_b = {}, _b[EXTRA_FIELD] = (_f = spreadsheet === null || spreadsheet === void 0 ? void 0 : spreadsheet.dataSet) === null || _f === void 0 ? void 0 : _f.fields.values[0], _b));\r\n                    isLeaf = true;\r\n                }\r\n                else {\r\n                    // root[&]四川[&]总计 => {province: '四川'}\r\n                    nodeQuery = query;\r\n                    if (!addTotalMeasureInTotal) {\r\n                        isLeaf = true;\r\n                    }\r\n                }\r\n            }\r\n            else if (isTotalMeasure) {\r\n                value = i18n(fieldValue.label);\r\n                // root[&]四川[&]总计[&]price => {province: '四川',EXTRA_FIELD: 'price' }\r\n                nodeQuery = __assign(__assign({}, query), (_c = {}, _c[EXTRA_FIELD] = value, _c));\r\n                adjustedField = EXTRA_FIELD;\r\n                isLeaf = true;\r\n            }\r\n            else if (spreadsheet.isTableMode()) {\r\n                value = fieldValue;\r\n                adjustedField = fields[index];\r\n                nodeQuery = __assign(__assign({}, query), (_d = {}, _d[adjustedField] = value, _d));\r\n                isLeaf = true;\r\n            }\r\n            else {\r\n                value = fieldValue;\r\n                // root[&]四川[&]成都 => {province: '四川', city: '成都' }\r\n                nodeQuery = __assign(__assign({}, query), (_e = {}, _e[currentField] = value, _e));\r\n                var isValueInCols = (_h = (_g = spreadsheet.dataCfg.fields) === null || _g === void 0 ? void 0 : _g.valueInCols) !== null && _h !== void 0 ? _h : true;\r\n                var isHideMeasure = (colCfg === null || colCfg === void 0 ? void 0 : colCfg.hideMeasureColumn) &&\r\n                    isValueInCols &&\r\n                    includes(fields, EXTRA_FIELD);\r\n                var extraSize = isHideMeasure ? 2 : 1;\r\n                isLeaf = level === fields.length - extraSize;\r\n            }\r\n            var uniqueId = generateId(parentNode.id, value);\r\n            if (!uniqueId)\r\n                return;\r\n            // TODO need merge with collapsedRows\r\n            var isCollapsed = isBoolean(collapsedCols === null || collapsedCols === void 0 ? void 0 : collapsedCols[uniqueId])\r\n                ? collapsedCols === null || collapsedCols === void 0 ? void 0 : collapsedCols[uniqueId]\r\n                : false;\r\n            // create new header nodes\r\n            var node = new Node({\r\n                id: uniqueId,\r\n                key: adjustedField,\r\n                value: value,\r\n                level: level,\r\n                field: adjustedField,\r\n                parent: parentNode,\r\n                isTotals: isTotals,\r\n                isGrandTotals: isGrandTotals,\r\n                isSubTotals: isSubTotals,\r\n                isTotalMeasure: isTotalMeasure,\r\n                isCollapsed: isCollapsed,\r\n                hierarchy: hierarchy,\r\n                query: nodeQuery,\r\n                spreadsheet: spreadsheet,\r\n                isLeaf: isLeaf || isCollapsed,\r\n            });\r\n            var expandCurrentNode = layoutHierarchy(facetCfg, parentNode, node, hierarchy);\r\n            // omit the the whole column or row of the grandTotal or subTotals\r\n            if (level > hierarchy.maxLevel &&\r\n                !isGrandTotals &&\r\n                !parentNode.isGrandTotals &&\r\n                !parentNode.isSubTotals &&\r\n                !node.isSubTotals) {\r\n                hierarchy.sampleNodesForAllLevels.push(node);\r\n                hierarchy.sampleNodeForLastLevel = node;\r\n                hierarchy.maxLevel = level;\r\n            }\r\n            var isLeafNode = isLeaf || isCollapsed || !expandCurrentNode;\r\n            if (isLeafNode) {\r\n                node.isLeaf = true;\r\n                hierarchy.pushIndexNode(node);\r\n                node.rowIndex = hierarchy.getIndexNodes().length - 1;\r\n            }\r\n            else {\r\n                buildGridHierarchy({\r\n                    addTotalMeasureInTotal: addTotalMeasureInTotal,\r\n                    addMeasureInTotalQuery: addMeasureInTotalQuery,\r\n                    parentNode: node,\r\n                    currentField: fields[level + 1],\r\n                    fields: fields,\r\n                    facetCfg: facetCfg,\r\n                    hierarchy: hierarchy,\r\n                });\r\n            }\r\n        }\r\n    }\r\n    catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n    finally {\r\n        try {\r\n            if (_k && !_k.done && (_a = _j.return)) _a.call(_j);\r\n        }\r\n        finally { if (e_1) throw e_1.error; }\r\n    }\r\n};\r\n//# sourceMappingURL=generate-header-nodes.js.map","references":["F:/Ismart/S2-master/node_modules/@types/lodash/index.d.ts","F:/Ismart/S2-master/packages/s2-core/src/facet/layout/interface.ts","F:/Ismart/S2-master/packages/s2-core/src/facet/layout/total-class.ts","F:/Ismart/S2-master/packages/s2-core/src/facet/layout/total-measure.ts","F:/Ismart/S2-master/packages/s2-core/src/common/i18n/index.ts","F:/Ismart/S2-master/packages/s2-core/src/common/constant/index.ts","F:/Ismart/S2-master/packages/s2-core/src/utils/layout/generate-id.ts","F:/Ismart/S2-master/packages/s2-core/src/facet/layout/node.ts","F:/Ismart/S2-master/packages/s2-core/src/facet/layout/layout-hooks.ts","F:/Ismart/S2-master/packages/s2-core/src/facet/layout/build-gird-hierarchy.ts"],"map":"{\"version\":3,\"file\":\"generate-header-nodes.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/utils/layout/generate-header-nodes.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"F:/Ismart/S2-master/packages/s2-core/node_modules/.cache/rollup-plugin-typescript2/placeholder/utils/layout/generate-header-nodes.d.ts","writeByteOrderMark":false,"text":"import { HeaderNodesParams } from \"../../facet/layout/interface\";\r\nexport declare const generateHeaderNodes: (params: HeaderNodesParams) => void;\r\n"}}
