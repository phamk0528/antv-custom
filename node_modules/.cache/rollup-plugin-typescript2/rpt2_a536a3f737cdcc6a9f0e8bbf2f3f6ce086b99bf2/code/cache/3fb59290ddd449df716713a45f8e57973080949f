{"code":"import { __assign, __extends, __read, __spreadArray } from \"tslib\";\r\nimport { clamp, findLast, first, get, isEmpty, isEqual } from 'lodash';\r\nimport { BaseCell } from \"./base-cell\";\r\nimport { CellTypes, InteractionStateName, SHAPE_STYLE_MAP, } from \"../common/constant/interaction\";\r\nimport { CellBorderPosition, } from \"../common/interface\";\r\nimport { getMaxTextWidth, getBorderPositionAndStyle } from \"../utils/cell/cell\";\r\nimport { includeCell } from \"../utils/cell/data-cell\";\r\nimport { getIconPositionCfg } from \"../utils/condition/condition\";\r\nimport { renderIcon, renderLine, renderRect, updateShapeAttr, } from \"../utils/g-renders\";\r\nimport { parseNumberWithPrecision } from \"../utils/formatter\";\r\n/**\r\n * DataCell for panelGroup area\r\n * ----------------------------\r\n * |                  |       |\r\n * |interval      text| icon  |\r\n * |                  |       |\r\n * ----------------------------\r\n * There are four conditions(]{@see BaseCell.conditions}) to determine how to render\r\n * 1、background color\r\n * 2、icon align in right with size {@link ICON_SIZE}\r\n * 3、left rect area is interval(in left) and text(in right)\r\n */\r\nvar DataCell = /** @class */ (function (_super) {\r\n    __extends(DataCell, _super);\r\n    function DataCell() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    Object.defineProperty(DataCell.prototype, \"cellType\", {\r\n        get: function () {\r\n            return CellTypes.DATA_CELL;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    DataCell.prototype.handlePrepareSelect = function (cells) {\r\n        if (includeCell(cells, this)) {\r\n            this.updateByState(InteractionStateName.PREPARE_SELECT);\r\n        }\r\n    };\r\n    DataCell.prototype.handleSelect = function (cells) {\r\n        var _a;\r\n        var currentCellType = (_a = cells === null || cells === void 0 ? void 0 : cells[0]) === null || _a === void 0 ? void 0 : _a.type;\r\n        switch (currentCellType) {\r\n            // 列多选\r\n            case CellTypes.COL_CELL:\r\n                this.changeRowColSelectState('colIndex');\r\n                break;\r\n            // 行多选\r\n            case CellTypes.ROW_CELL:\r\n                this.changeRowColSelectState('rowIndex');\r\n                break;\r\n            // 单元格单选/多选\r\n            case CellTypes.DATA_CELL:\r\n                if (includeCell(cells, this)) {\r\n                    this.updateByState(InteractionStateName.SELECTED);\r\n                }\r\n                else if (this.spreadsheet.options.interaction.selectedCellsSpotlight) {\r\n                    this.updateByState(InteractionStateName.UNSELECTED);\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n    DataCell.prototype.handleHover = function (cells) {\r\n        var currentHoverCell = first(cells);\r\n        if (currentHoverCell.type !== CellTypes.DATA_CELL) {\r\n            this.hideInteractionShape();\r\n            return;\r\n        }\r\n        if (this.spreadsheet.options.interaction.hoverHighlight) {\r\n            // 如果当前是hover，要绘制出十字交叉的行列样式\r\n            var currentColIndex = this.meta.colIndex;\r\n            var currentRowIndex = this.meta.rowIndex;\r\n            // 当视图内的 cell 行列 index 与 hover 的 cell 一致，绘制hover的十字样式\r\n            if (currentColIndex === (currentHoverCell === null || currentHoverCell === void 0 ? void 0 : currentHoverCell.colIndex) ||\r\n                currentRowIndex === (currentHoverCell === null || currentHoverCell === void 0 ? void 0 : currentHoverCell.rowIndex)) {\r\n                this.updateByState(InteractionStateName.HOVER);\r\n            }\r\n            else {\r\n                // 当视图内的 cell 行列 index 与 hover 的 cell 不一致，隐藏其他样式\r\n                this.hideInteractionShape();\r\n            }\r\n        }\r\n        if (isEqual(currentHoverCell.id, this.getMeta().id)) {\r\n            this.updateByState(InteractionStateName.HOVER_FOCUS);\r\n        }\r\n    };\r\n    DataCell.prototype.update = function () {\r\n        var stateName = this.spreadsheet.interaction.getCurrentStateName();\r\n        var cells = this.spreadsheet.interaction.getCells();\r\n        if (stateName === InteractionStateName.ALL_SELECTED) {\r\n            this.updateByState(InteractionStateName.SELECTED);\r\n            return;\r\n        }\r\n        if (isEmpty(cells) || !stateName) {\r\n            return;\r\n        }\r\n        switch (stateName) {\r\n            case InteractionStateName.PREPARE_SELECT:\r\n                this.handlePrepareSelect(cells);\r\n                break;\r\n            case InteractionStateName.SELECTED:\r\n                this.handleSelect(cells);\r\n                break;\r\n            case InteractionStateName.HOVER_FOCUS:\r\n            case InteractionStateName.HOVER:\r\n                this.handleHover(cells);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n    DataCell.prototype.setMeta = function (viewMeta) {\r\n        _super.prototype.setMeta.call(this, viewMeta);\r\n        this.initCell();\r\n    };\r\n    DataCell.prototype.initCell = function () {\r\n        this.conditions = this.spreadsheet.options.conditions;\r\n        this.drawBackgroundShape();\r\n        this.drawInteractiveBgShape();\r\n        this.drawConditionIntervalShape();\r\n        this.drawInteractiveBorderShape();\r\n        this.drawTextShape();\r\n        this.drawConditionIconShapes();\r\n        this.drawBorderShape();\r\n        this.update();\r\n    };\r\n    DataCell.prototype.getTextStyle = function () {\r\n        var _a, _b;\r\n        var isTotals = this.meta.isTotals;\r\n        var textStyle = isTotals\r\n            ? this.theme.dataCell.bolderText\r\n            : this.theme.dataCell.text;\r\n        // get text condition's fill result\r\n        var fill = textStyle.fill;\r\n        var textCondition = this.findFieldCondition((_a = this.conditions) === null || _a === void 0 ? void 0 : _a.text);\r\n        if (textCondition === null || textCondition === void 0 ? void 0 : textCondition.mapping) {\r\n            fill = (_b = this.mappingValue(textCondition)) === null || _b === void 0 ? void 0 : _b.fill;\r\n        }\r\n        return __assign(__assign({}, textStyle), { fill: fill });\r\n    };\r\n    DataCell.prototype.getIconStyle = function () {\r\n        var _a;\r\n        var _b = this.theme.dataCell.icon, size = _b.size, margin = _b.margin;\r\n        var iconCondition = this.findFieldCondition((_a = this.conditions) === null || _a === void 0 ? void 0 : _a.icon);\r\n        var iconCfg = iconCondition &&\r\n            iconCondition.mapping && {\r\n            size: size,\r\n            margin: margin,\r\n            position: getIconPositionCfg(iconCondition),\r\n        };\r\n        return iconCfg;\r\n    };\r\n    DataCell.prototype.getFormattedFieldValue = function () {\r\n        var _a = this.meta, rowId = _a.rowId, valueField = _a.valueField, fieldValue = _a.fieldValue, data = _a.data;\r\n        var rowMeta = this.spreadsheet.dataSet.getFieldMeta(rowId);\r\n        var formatter;\r\n        if (rowMeta) {\r\n            // format by row field\r\n            formatter = this.spreadsheet.dataSet.getFieldFormatter(rowId);\r\n        }\r\n        else {\r\n            // format by value field\r\n            formatter = this.spreadsheet.dataSet.getFieldFormatter(valueField);\r\n        }\r\n        var formattedValue = formatter(fieldValue, data);\r\n        return {\r\n            value: fieldValue,\r\n            formattedValue: formattedValue,\r\n        };\r\n    };\r\n    DataCell.prototype.getMaxTextWidth = function () {\r\n        var width = this.getContentArea().width;\r\n        return getMaxTextWidth(width, this.getIconStyle());\r\n    };\r\n    DataCell.prototype.getTextPosition = function () {\r\n        return this.getTextAndIconPosition().text;\r\n    };\r\n    DataCell.prototype.drawConditionIconShapes = function () {\r\n        var _a;\r\n        var iconCondition = this.findFieldCondition((_a = this.conditions) === null || _a === void 0 ? void 0 : _a.icon);\r\n        if (iconCondition && iconCondition.mapping) {\r\n            var attrs = this.mappingValue(iconCondition);\r\n            var position = this.getIconPosition();\r\n            var formattedValue = this.getFormattedFieldValue().formattedValue;\r\n            var size = this.theme.dataCell.icon.size;\r\n            if (!isEmpty(attrs === null || attrs === void 0 ? void 0 : attrs.icon) && formattedValue) {\r\n                this.conditionIconShape = renderIcon(this, __assign(__assign({}, position), { name: attrs.icon, width: size, height: size, fill: attrs.fill }));\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * 计算柱图的 scale 函数（两种情况）\r\n     *\r\n     * min_________x_____0___________________________max\r\n     * |<----r---->|\r\n     *\r\n     * 0_________________min_________x_______________max\r\n     * |<-------------r------------->|\r\n     *\r\n     * @param minValue in current field values\r\n     * @param max in current field values\r\n     */\r\n    DataCell.prototype.getIntervalScale = function (minValue, maxValue) {\r\n        if (minValue === void 0) { minValue = 0; }\r\n        if (maxValue === void 0) { maxValue = 0; }\r\n        minValue = parseNumberWithPrecision(minValue);\r\n        maxValue = parseNumberWithPrecision(maxValue);\r\n        var realMin = minValue >= 0 ? 0 : minValue;\r\n        var distance = maxValue - realMin || 1;\r\n        return function (current) {\r\n            // max percentage shouldn't be greater than 100%\r\n            // min percentage shouldn't be less than 0%\r\n            return clamp((current - realMin) / distance, 0, 1);\r\n        };\r\n    };\r\n    /**\r\n     * Draw interval condition shape\r\n     * @private\r\n     */\r\n    DataCell.prototype.drawConditionIntervalShape = function () {\r\n        var _a, _b;\r\n        var _c = this.getCellArea(), x = _c.x, y = _c.y, height = _c.height, width = _c.width;\r\n        var formattedValue = this.getFormattedFieldValue().formattedValue;\r\n        var intervalCondition = this.findFieldCondition((_a = this.conditions) === null || _a === void 0 ? void 0 : _a.interval);\r\n        if (intervalCondition && intervalCondition.mapping && formattedValue) {\r\n            var attrs = this.mappingValue(intervalCondition);\r\n            if (!attrs) {\r\n                return;\r\n            }\r\n            var _d = attrs.isCompare\r\n                ? attrs\r\n                : this.spreadsheet.dataSet.getValueRangeByField(this.meta.valueField), minValue = _d.minValue, maxValue = _d.maxValue;\r\n            var fieldValue = parseNumberWithPrecision(this.meta.fieldValue);\r\n            // 对于超出设定范围的值不予显示\r\n            if (fieldValue < minValue || fieldValue > maxValue) {\r\n                return;\r\n            }\r\n            var scale = this.getIntervalScale(minValue, maxValue);\r\n            var zero = scale(0); // 零点\r\n            var current = scale(fieldValue); // 当前数据点\r\n            var barChartHeight = this.getStyle().cell.miniBarChartHeight;\r\n            var barChartFillColor = this.getStyle().cell.miniBarChartFillColor;\r\n            var fill = (_b = attrs.fill) !== null && _b !== void 0 ? _b : barChartFillColor;\r\n            this.conditionIntervalShape = renderRect(this, {\r\n                x: x + width * zero,\r\n                y: y + height / 2 - barChartHeight / 2,\r\n                width: width * (current - zero),\r\n                height: barChartHeight,\r\n                fill: fill,\r\n            });\r\n        }\r\n    };\r\n    DataCell.prototype.getBackgroundColor = function () {\r\n        var _a;\r\n        var crossBackgroundColor = this.getStyle().cell.crossBackgroundColor;\r\n        var backgroundColor = this.getStyle().cell.backgroundColor;\r\n        var strokeColor = 'transparent';\r\n        if (this.spreadsheet.isPivotMode() &&\r\n            crossBackgroundColor &&\r\n            this.meta.rowIndex % 2 === 0) {\r\n            // 隔行颜色的配置\r\n            // 偶数行展示灰色背景，因为index是从0开始的\r\n            backgroundColor = crossBackgroundColor;\r\n        }\r\n        // get background condition fill color\r\n        var bgCondition = this.findFieldCondition((_a = this.conditions) === null || _a === void 0 ? void 0 : _a.background);\r\n        if (bgCondition && bgCondition.mapping) {\r\n            var attrs = this.mappingValue(bgCondition);\r\n            if (attrs) {\r\n                backgroundColor = attrs.fill;\r\n            }\r\n        }\r\n        return { backgroundColor: backgroundColor, strokeColor: strokeColor };\r\n    };\r\n    /**\r\n     * Draw cell background\r\n     */\r\n    DataCell.prototype.drawBackgroundShape = function () {\r\n        var _a = this.getBackgroundColor(), fill = _a.backgroundColor, stroke = _a.strokeColor;\r\n        this.backgroundShape = renderRect(this, __assign(__assign({}, this.getCellArea()), { fill: fill, stroke: stroke }));\r\n    };\r\n    /**\r\n     * 绘制hover悬停，刷选的外框\r\n     */\r\n    DataCell.prototype.drawInteractiveBorderShape = function () {\r\n        // 往内缩一个像素，避免和外边框重叠\r\n        var margin = 1;\r\n        var _a = this.getCellArea(), x = _a.x, y = _a.y, height = _a.height, width = _a.width;\r\n        this.stateShapes.set('interactiveBorderShape', renderRect(this, {\r\n            x: x + margin,\r\n            y: y + margin,\r\n            width: width - margin * 2,\r\n            height: height - margin * 2,\r\n            fill: 'transparent',\r\n            stroke: 'transparent',\r\n        }));\r\n    };\r\n    /**\r\n     * Draw interactive color\r\n     */\r\n    DataCell.prototype.drawInteractiveBgShape = function () {\r\n        this.stateShapes.set('interactiveBgShape', renderRect(this, __assign(__assign({}, this.getCellArea()), { fill: 'transparent', stroke: 'transparent' })));\r\n    };\r\n    // dataCell根据state 改变当前样式，\r\n    DataCell.prototype.changeRowColSelectState = function (indexType) {\r\n        var interaction = this.spreadsheet.interaction;\r\n        var currentIndex = get(this.meta, indexType);\r\n        var _a = interaction.getState(), _b = _a.nodes, nodes = _b === void 0 ? [] : _b, _c = _a.cells, cells = _c === void 0 ? [] : _c;\r\n        var isEqualIndex = __spreadArray(__spreadArray([], __read(nodes), false), __read(cells), false).find(function (cell) { return get(cell, indexType) === currentIndex; });\r\n        if (isEqualIndex) {\r\n            this.updateByState(InteractionStateName.SELECTED);\r\n        }\r\n        else if (this.spreadsheet.options.interaction.selectedCellsSpotlight) {\r\n            this.updateByState(InteractionStateName.UNSELECTED);\r\n        }\r\n        else {\r\n            this.hideInteractionShape();\r\n        }\r\n    };\r\n    /**\r\n     * Render cell border controlled by verticalBorder & horizontalBorder\r\n     * @private\r\n     */\r\n    DataCell.prototype.drawBorderShape = function () {\r\n        var _this = this;\r\n        [CellBorderPosition.BOTTOM, CellBorderPosition.RIGHT].forEach(function (type) {\r\n            var _a = getBorderPositionAndStyle(type, _this.getCellArea(), _this.getStyle().cell), position = _a.position, style = _a.style;\r\n            renderLine(_this, position, style);\r\n        });\r\n    };\r\n    /**\r\n     * Find current field related condition\r\n     * @param conditions\r\n     */\r\n    DataCell.prototype.findFieldCondition = function (conditions) {\r\n        var _this = this;\r\n        return findLast(conditions, function (item) {\r\n            return item.field instanceof RegExp\r\n                ? item.field.test(_this.meta.valueField)\r\n                : item.field === _this.meta.valueField;\r\n        });\r\n    };\r\n    /**\r\n     * Mapping value to get condition related attrs\r\n     * @param condition\r\n     */\r\n    DataCell.prototype.mappingValue = function (condition) {\r\n        var value = this.meta.fieldValue;\r\n        return condition === null || condition === void 0 ? void 0 : condition.mapping(value, this.meta.data);\r\n    };\r\n    DataCell.prototype.updateByState = function (stateName) {\r\n        _super.prototype.updateByState.call(this, stateName, this);\r\n        if (stateName === InteractionStateName.UNSELECTED) {\r\n            var stateStyles = get(this.theme, \"\".concat(this.cellType, \".cell.interactionState.\").concat(stateName));\r\n            if (stateStyles) {\r\n                updateShapeAttr(this.conditionIntervalShape, SHAPE_STYLE_MAP.backgroundOpacity, stateStyles.backgroundOpacity);\r\n                updateShapeAttr(this.conditionIconShape, SHAPE_STYLE_MAP.opacity, stateStyles.opacity);\r\n            }\r\n        }\r\n    };\r\n    DataCell.prototype.clearUnselectedState = function () {\r\n        _super.prototype.clearUnselectedState.call(this);\r\n        updateShapeAttr(this.conditionIntervalShape, SHAPE_STYLE_MAP.backgroundOpacity, 1);\r\n        updateShapeAttr(this.conditionIconShape, SHAPE_STYLE_MAP.opacity, 1);\r\n    };\r\n    DataCell.prototype.drawLeftBorder = function () {\r\n        var _a = getBorderPositionAndStyle(CellBorderPosition.LEFT, this.getCellArea(), this.getStyle().cell), position = _a.position, style = _a.style;\r\n        renderLine(this, position, style);\r\n    };\r\n    return DataCell;\r\n}(BaseCell));\r\nexport { DataCell };\r\n//# sourceMappingURL=data-cell.js.map","references":["F:/Ismart/S2-master/node_modules/@antv/g-canvas/lib/index.d.ts","F:/Ismart/S2-master/node_modules/@types/lodash/index.d.ts","F:/Ismart/S2-master/packages/s2-core/src/cell/base-cell.ts","F:/Ismart/S2-master/packages/s2-core/src/common/constant/interaction.ts","F:/Ismart/S2-master/packages/s2-core/src/common/icons/index.ts","F:/Ismart/S2-master/packages/s2-core/src/common/interface/index.ts","F:/Ismart/S2-master/packages/s2-core/src/utils/cell/cell.ts","F:/Ismart/S2-master/packages/s2-core/src/utils/cell/data-cell.ts","F:/Ismart/S2-master/packages/s2-core/src/utils/condition/condition.ts","F:/Ismart/S2-master/packages/s2-core/src/utils/g-renders.ts","F:/Ismart/S2-master/packages/s2-core/src/utils/formatter.ts"],"map":"{\"version\":3,\"file\":\"data-cell.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/cell/data-cell.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"F:/Ismart/S2-master/packages/s2-core/node_modules/.cache/rollup-plugin-typescript2/placeholder/cell/data-cell.d.ts","writeByteOrderMark":false,"text":"import type { IShape, Point } from '@antv/g-canvas';\r\nimport { BaseCell } from \"./base-cell\";\r\nimport { CellTypes, InteractionStateName } from \"../common/constant/interaction\";\r\nimport { GuiIcon } from \"../common/icons\";\r\nimport { Condition, Conditions, FormatResult, IconCfg, MappingResult, CellMeta, TextTheme, ViewMeta } from \"../common/interface\";\r\n/**\r\n * DataCell for panelGroup area\r\n * ----------------------------\r\n * |                  |       |\r\n * |interval      text| icon  |\r\n * |                  |       |\r\n * ----------------------------\r\n * There are four conditions(]{@see BaseCell.conditions}) to determine how to render\r\n * 1、background color\r\n * 2、icon align in right with size {@link ICON_SIZE}\r\n * 3、left rect area is interval(in left) and text(in right)\r\n */\r\nexport declare class DataCell extends BaseCell<ViewMeta> {\r\n    protected conditions: Conditions;\r\n    protected conditionIntervalShape: IShape;\r\n    protected conditionIconShape: GuiIcon;\r\n    get cellType(): CellTypes;\r\n    protected handlePrepareSelect(cells: CellMeta[]): void;\r\n    protected handleSelect(cells: CellMeta[]): void;\r\n    protected handleHover(cells: CellMeta[]): void;\r\n    update(): void;\r\n    setMeta(viewMeta: ViewMeta): void;\r\n    protected initCell(): void;\r\n    protected getTextStyle(): TextTheme;\r\n    getIconStyle(): IconCfg | undefined;\r\n    protected getFormattedFieldValue(): FormatResult;\r\n    protected getMaxTextWidth(): number;\r\n    protected getTextPosition(): Point;\r\n    protected drawConditionIconShapes(): void;\r\n    /**\r\n     * 计算柱图的 scale 函数（两种情况）\r\n     *\r\n     * min_________x_____0___________________________max\r\n     * |<----r---->|\r\n     *\r\n     * 0_________________min_________x_______________max\r\n     * |<-------------r------------->|\r\n     *\r\n     * @param minValue in current field values\r\n     * @param max in current field values\r\n     */\r\n    private getIntervalScale;\r\n    /**\r\n     * Draw interval condition shape\r\n     * @private\r\n     */\r\n    protected drawConditionIntervalShape(): void;\r\n    getBackgroundColor(): {\r\n        backgroundColor: string;\r\n        strokeColor: string;\r\n    };\r\n    /**\r\n     * Draw cell background\r\n     */\r\n    protected drawBackgroundShape(): void;\r\n    /**\r\n     * 绘制hover悬停，刷选的外框\r\n     */\r\n    protected drawInteractiveBorderShape(): void;\r\n    /**\r\n     * Draw interactive color\r\n     */\r\n    protected drawInteractiveBgShape(): void;\r\n    private changeRowColSelectState;\r\n    /**\r\n     * Render cell border controlled by verticalBorder & horizontalBorder\r\n     * @private\r\n     */\r\n    protected drawBorderShape(): void;\r\n    /**\r\n     * Find current field related condition\r\n     * @param conditions\r\n     */\r\n    protected findFieldCondition(conditions: Condition[]): Condition;\r\n    /**\r\n     * Mapping value to get condition related attrs\r\n     * @param condition\r\n     */\r\n    protected mappingValue(condition: Condition): MappingResult;\r\n    updateByState(stateName: InteractionStateName): void;\r\n    clearUnselectedState(): void;\r\n    protected drawLeftBorder(): void;\r\n}\r\n"}}
