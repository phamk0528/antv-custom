{"code":"export {};\r\n//# sourceMappingURL=hooks.js.map","references":["F:/Ismart/S2-master/packages/s2-core/src/facet/layout/node.ts","F:/Ismart/S2-master/packages/s2-core/src/sheet-type/index.ts","F:/Ismart/S2-master/packages/s2-core/src/common/interface/basic.ts"],"map":"{\"version\":3,\"file\":\"hooks.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/common/interface/hooks.ts\"],\"names\":[],\"mappings\":\"\"}","dts":{"name":"F:/Ismart/S2-master/packages/s2-core/node_modules/.cache/rollup-plugin-typescript2/placeholder/common/interface/hooks.d.ts","writeByteOrderMark":false,"text":"import { Node } from \"../../facet/layout/node\";\r\nimport { SpreadSheet } from \"../../sheet-type\";\r\nimport { GetCellMeta } from \"./basic\";\r\n/**\r\n * determine the order of every row/column tree branch\r\n */\r\nexport declare type LayoutArrange = (spreadsheet: SpreadSheet, parent: Node, field: string, fieldValues: string[]) => string[];\r\n/**\r\n * determine what does row/column hierarchy look like\r\n * eg: add/delete some nodes in the specified position\r\n */\r\nexport declare type LayoutHierarchy = (spreadsheet: SpreadSheet, node: Node) => LayoutHierarchyReturnType;\r\nexport interface LayoutHierarchyReturnType {\r\n    push?: Node[];\r\n    unshift?: Node[];\r\n    delete?: boolean;\r\n}\r\n/**\r\n * determine the location(x,y,width,height eg..) of every node\r\n */\r\nexport declare type LayoutCoordinate = (spreadsheet: SpreadSheet, rowNode: Node, colNode: Node) => void;\r\n/**\r\n * determine the data of cells in Cartesian coordinates\r\n */\r\nexport declare type LayoutDataPosition = (spreadsheet: SpreadSheet, getCellData: GetCellMeta) => GetCellMeta;\r\n"}}
