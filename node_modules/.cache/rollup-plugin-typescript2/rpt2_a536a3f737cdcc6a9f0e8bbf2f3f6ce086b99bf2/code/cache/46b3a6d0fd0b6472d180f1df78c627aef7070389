{"code":"import { forEach, isEmpty } from 'lodash';\r\nimport { INTERACTION_STATE_INFO_KEY } from \"../../common/constant\";\r\n/**\r\n * @desc clear the interaction state information\r\n * @param spreadsheet sheet instance\r\n */\r\nexport var clearState = function (spreadsheet) {\r\n    var activeIcons = spreadsheet.store.get('visibleActionIcons');\r\n    forEach(activeIcons, function (icon) {\r\n        icon.set('visible', false);\r\n    });\r\n    spreadsheet.store.set('visibleActionIcons', []);\r\n    var allInteractedCells = spreadsheet.interaction.getInteractedCells();\r\n    var cellMetas = spreadsheet.interaction.getState().cells;\r\n    if (!isEmpty(allInteractedCells) && !isEmpty(cellMetas)) {\r\n        forEach(allInteractedCells, function (cell) {\r\n            cell.hideInteractionShape();\r\n        });\r\n        spreadsheet.interaction.resetState();\r\n        if (spreadsheet.options.interaction.selectedCellsSpotlight) {\r\n            var unSelectedCells = spreadsheet.interaction.getPanelGroupAllUnSelectedDataCells() || [];\r\n            forEach(unSelectedCells, function (cell) {\r\n                cell.clearUnselectedState();\r\n            });\r\n        }\r\n    }\r\n};\r\n/**\r\n * @desc set the interaction state information\r\n * @param spreadsheet sheet instance\r\n * @param interactionStateInfo\r\n */\r\nexport var setState = function (spreadsheet, interactionStateInfo) {\r\n    var stateName = interactionStateInfo === null || interactionStateInfo === void 0 ? void 0 : interactionStateInfo.stateName;\r\n    if (!spreadsheet.interaction.isEqualStateName(stateName)) {\r\n        // There can only be one state in the table. When the stateName is inconsistent with the state in the stateInfo, the previously stored state should be cleared.\r\n        clearState(spreadsheet);\r\n        spreadsheet.hideTooltip();\r\n        spreadsheet.store.set(INTERACTION_STATE_INFO_KEY, interactionStateInfo);\r\n    }\r\n};\r\n//# sourceMappingURL=state-controller.js.map","references":["F:/Ismart/S2-master/node_modules/@types/lodash/index.d.ts","F:/Ismart/S2-master/packages/s2-core/src/common/constant/index.ts","F:/Ismart/S2-master/packages/s2-core/src/common/interface/index.ts","F:/Ismart/S2-master/packages/s2-core/src/sheet-type/index.ts"],"map":"{\"version\":3,\"file\":\"state-controller.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/utils/interaction/state-controller.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,QAAQ,CAAC;AAC1C,OAAO,EAAE,0BAA0B,EAAE,8BAA0B;AAI/D;;;GAGG;AACH,MAAM,CAAC,IAAM,UAAU,GAAG,UAAC,WAAwB;IACjD,IAAM,WAAW,GAAG,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;IAChE,OAAO,CAAC,WAAW,EAAE,UAAC,IAAI;QACxB,IAAI,CAAC,GAAG,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;IAC7B,CAAC,CAAC,CAAC;IACH,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,oBAAoB,EAAE,EAAE,CAAC,CAAC;IAEhD,IAAM,kBAAkB,GAAG,WAAW,CAAC,WAAW,CAAC,kBAAkB,EAAE,CAAC;IACxE,IAAM,SAAS,GAAG,WAAW,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,KAAK,CAAC;IAE3D,IAAI,CAAC,OAAO,CAAC,kBAAkB,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;QACvD,OAAO,CAAC,kBAAkB,EAAE,UAAC,IAAgB;YAC3C,IAAI,CAAC,oBAAoB,EAAE,CAAC;QAC9B,CAAC,CAAC,CAAC;QAEH,WAAW,CAAC,WAAW,CAAC,UAAU,EAAE,CAAC;QACrC,IAAI,WAAW,CAAC,OAAO,CAAC,WAAW,CAAC,sBAAsB,EAAE;YAC1D,IAAM,eAAe,GACnB,WAAW,CAAC,WAAW,CAAC,mCAAmC,EAAE,IAAI,EAAE,CAAC;YAEtE,OAAO,CAAC,eAAe,EAAE,UAAC,IAAI;gBAC5B,IAAI,CAAC,oBAAoB,EAAE,CAAC;YAC9B,CAAC,CAAC,CAAC;SACJ;KACF;AACH,CAAC,CAAC;AAEF;;;;GAIG;AACH,MAAM,CAAC,IAAM,QAAQ,GAAG,UACtB,WAAwB,EACxB,oBAA0C;IAE1C,IAAM,SAAS,GAAG,oBAAoB,aAApB,oBAAoB,uBAApB,oBAAoB,CAAE,SAAS,CAAC;IAClD,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,gBAAgB,CAAC,SAAS,CAAC,EAAE;QACxD,+JAA+J;QAC/J,UAAU,CAAC,WAAW,CAAC,CAAC;QACxB,WAAW,CAAC,WAAW,EAAE,CAAC;QAC1B,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,0BAA0B,EAAE,oBAAoB,CAAC,CAAC;KACzE;AACH,CAAC,CAAC\"}","dts":{"name":"F:/Ismart/S2-master/packages/s2-core/node_modules/.cache/rollup-plugin-typescript2/placeholder/utils/interaction/state-controller.d.ts","writeByteOrderMark":false,"text":"import { InteractionStateInfo } from \"../../common/interface\";\r\nimport { SpreadSheet } from \"../../sheet-type\";\r\n/**\r\n * @desc clear the interaction state information\r\n * @param spreadsheet sheet instance\r\n */\r\nexport declare const clearState: (spreadsheet: SpreadSheet) => void;\r\n/**\r\n * @desc set the interaction state information\r\n * @param spreadsheet sheet instance\r\n * @param interactionStateInfo\r\n */\r\nexport declare const setState: (spreadsheet: SpreadSheet, interactionStateInfo: InteractionStateInfo) => void;\r\n"}}
