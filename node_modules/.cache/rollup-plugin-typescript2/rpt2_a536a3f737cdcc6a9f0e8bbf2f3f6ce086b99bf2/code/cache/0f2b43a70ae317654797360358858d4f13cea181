{"code":"import { __read } from \"tslib\";\r\nimport { isNaN, toNumber } from 'lodash';\r\nimport { Lang } from '../common/i18n';\r\nimport { PRECISION } from \"../common/constant\";\r\nvar FORMATTERS = {\r\n    en_US: ['KMBTP'.split(''), [1e3, 1e3, 1e3, 1e3, 1e3]],\r\n    zh_CN: [\r\n        ['万', '亿'],\r\n        [10000, 1e4],\r\n    ],\r\n};\r\n/**\r\n * 自动格式化\r\n * 规则\r\n *  1，小于1w，使用逗号分割，例如 3,459\r\n *  2，大于1w，使用语义化，例如 3.2万，3.4亿 2,234万\r\n * @param v\r\n * @param fixed\r\n * @param formatter\r\n */\r\nexport var auto = function (v, fixed, formatter) {\r\n    if (fixed === void 0) { fixed = 2; }\r\n    if (formatter === void 0) { formatter = FORMATTERS[Lang] || FORMATTERS.zh_CN; }\r\n    if (typeof v !== 'number' || isNaN(v)) {\r\n        return '';\r\n    }\r\n    // let n = Math.abs(v); // abs什么鬼。\r\n    var n = v;\r\n    // 语义化\r\n    var _a = __read(formatter, 2), texts = _a[0], powers = _a[1];\r\n    var loop = 0;\r\n    var power;\r\n    var running = true;\r\n    while (running) {\r\n        power = powers[loop];\r\n        if (n >= power && loop < texts.length) {\r\n            n /= power;\r\n        }\r\n        else {\r\n            running = false;\r\n        }\r\n        loop += 1;\r\n    }\r\n    // parseFloat 解决 toFixed 出现很多 0 结尾。\r\n    // 举例：123.toFixed(2) = '123.00'，需要返回 '123'\r\n    n = parseFloat(n.toFixed(fixed));\r\n    // 千分位\r\n    var output = n >= 1000 ? n.toLocaleString('en') : \"\".concat(n);\r\n    // 加上最后的单位\r\n    return loop === 0 ? output : \"\".concat(output, \" \").concat(texts[loop - 1]);\r\n};\r\n// 简单处理小数精度误差，保持和Spreadsheet统一逻辑\r\n// 技术细节：https://juejin.im/post/5ce373d651882532e409ea96\r\nexport var parseNumberWithPrecision = function (value) {\r\n    return Number.parseFloat((toNumber(value) || 0).toPrecision(PRECISION));\r\n};\r\n//# sourceMappingURL=formatter.js.map","references":["F:/Ismart/S2-master/node_modules/@types/lodash/index.d.ts","F:/Ismart/S2-master/packages/s2-core/src/common/i18n/index.ts","F:/Ismart/S2-master/packages/s2-core/src/common/constant/index.ts"],"map":"{\"version\":3,\"file\":\"formatter.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/utils/formatter.ts\"],\"names\":[],\"mappings\":\";AAAA,OAAO,EAAE,KAAK,EAAE,QAAQ,EAAE,MAAM,QAAQ,CAAC;AACzC,OAAO,EAAE,IAAI,EAAE,MAAM,gBAAgB,CAAC;AACtC,OAAO,EAAE,SAAS,EAAE,2BAA0B;AAE9C,IAAM,UAAU,GAAG;IACjB,KAAK,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;IACrD,KAAK,EAAE;QACL,CAAC,GAAG,EAAE,GAAG,CAAC;QACV,CAAC,KAAK,EAAE,GAAG,CAAC;KACb;CACF,CAAC;AAEF;;;;;;;;GAQG;AACH,MAAM,CAAC,IAAM,IAAI,GAAG,UAClB,CAAS,EACT,KAAS,EACT,SAAgD;IADhD,sBAAA,EAAA,SAAS;IACT,0BAAA,EAAA,YAAY,UAAU,CAAC,IAAI,CAAC,IAAI,UAAU,CAAC,KAAK;IAEhD,IAAI,OAAO,CAAC,KAAK,QAAQ,IAAI,KAAK,CAAC,CAAC,CAAC,EAAE;QACrC,OAAO,EAAE,CAAC;KACX;IACD,kCAAkC;IAClC,IAAI,CAAC,GAAG,CAAC,CAAC;IACV,MAAM;IACA,IAAA,KAAA,OAAkB,SAAS,IAAA,EAA1B,KAAK,QAAA,EAAE,MAAM,QAAa,CAAC;IAElC,IAAI,IAAI,GAAG,CAAC,CAAC;IACb,IAAI,KAAK,CAAC;IACV,IAAI,OAAO,GAAG,IAAI,CAAC;IAEnB,OAAO,OAAO,EAAE;QACd,KAAK,GAAG,MAAM,CAAC,IAAI,CAAW,CAAC;QAE/B,IAAI,CAAC,IAAI,KAAK,IAAI,IAAI,GAAG,KAAK,CAAC,MAAM,EAAE;YACrC,CAAC,IAAI,KAAK,CAAC;SACZ;aAAM;YACL,OAAO,GAAG,KAAK,CAAC;SACjB;QACD,IAAI,IAAI,CAAC,CAAC;KACX;IAED,mCAAmC;IACnC,0CAA0C;IAC1C,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;IAEjC,MAAM;IACN,IAAM,MAAM,GAAG,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,UAAG,CAAC,CAAE,CAAC;IAE3D,UAAU;IACV,OAAO,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,UAAG,MAAM,cAAI,KAAK,CAAC,IAAI,GAAG,CAAC,CAAC,CAAE,CAAC;AAC9D,CAAC,CAAC;AAEF,gCAAgC;AAChC,uDAAuD;AACvD,MAAM,CAAC,IAAM,wBAAwB,GAAG,UAAC,KAAsB;IAC7D,OAAO,MAAM,CAAC,UAAU,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC;AAC1E,CAAC,CAAC\"}","dts":{"name":"F:/Ismart/S2-master/packages/s2-core/node_modules/.cache/rollup-plugin-typescript2/placeholder/utils/formatter.d.ts","writeByteOrderMark":false,"text":"/**\r\n * 自动格式化\r\n * 规则\r\n *  1，小于1w，使用逗号分割，例如 3,459\r\n *  2，大于1w，使用语义化，例如 3.2万，3.4亿 2,234万\r\n * @param v\r\n * @param fixed\r\n * @param formatter\r\n */\r\nexport declare const auto: (v: number, fixed?: number, formatter?: any) => string;\r\nexport declare const parseNumberWithPrecision: (value: number | string) => number;\r\n"}}
