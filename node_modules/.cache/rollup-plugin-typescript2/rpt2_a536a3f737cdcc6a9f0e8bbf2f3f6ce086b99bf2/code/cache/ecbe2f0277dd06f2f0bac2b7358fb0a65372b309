{"code":"export {};\r\n//# sourceMappingURL=condition.js.map","references":["F:/Ismart/S2-master/packages/s2-core/src/common/interface/theme.ts"],"map":"{\"version\":3,\"file\":\"condition.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/common/interface/condition.ts\"],\"names\":[],\"mappings\":\"\"}","dts":{"name":"F:/Ismart/S2-master/packages/s2-core/node_modules/.cache/rollup-plugin-typescript2/placeholder/common/interface/condition.d.ts","writeByteOrderMark":false,"text":"import { IconTheme } from './theme';\r\nexport interface ValueRange {\r\n    minValue?: number;\r\n    maxValue?: number;\r\n}\r\nexport declare type ValueRanges = Record<string, ValueRange>;\r\nexport interface MappingResult extends ValueRange {\r\n    icon?: string;\r\n    fill: string;\r\n    isCompare?: boolean;\r\n}\r\nexport declare type MappingFunction = (fieldValue: number | string, data: Record<string, any>) => MappingResult;\r\n/**\r\n * One field can hold a condition\r\n */\r\nexport interface Condition {\r\n    readonly field: string | RegExp;\r\n    readonly mapping: MappingFunction;\r\n}\r\nexport declare type IconPosition = 'left' | 'right';\r\nexport interface IconCondition extends Condition {\r\n    readonly position?: IconPosition;\r\n}\r\nexport interface Conditions {\r\n    readonly text?: Condition[];\r\n    readonly background?: Condition[];\r\n    readonly interval?: Condition[];\r\n    readonly icon?: IconCondition[];\r\n}\r\nexport declare type IconCfg = Pick<IconTheme, 'size' | 'margin'> & Pick<IconCondition, 'position'>;\r\n"}}
