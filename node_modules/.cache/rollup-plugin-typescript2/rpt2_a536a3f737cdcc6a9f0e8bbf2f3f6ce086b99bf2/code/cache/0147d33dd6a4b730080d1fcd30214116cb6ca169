{"code":"import { __assign, __extends, __rest } from \"tslib\";\r\nimport { forEach, get, has, intersection, isEmpty, keys, uniq } from 'lodash';\r\nimport { PivotDataSet } from \"./pivot-data-set\";\r\nimport { EXTRA_FIELD, VALUE_FIELD } from \"../common/constant\";\r\nimport { getDataPath, getQueryDimValues, transformIndexesData, } from \"../utils/dataset/pivot-data-set\";\r\nvar CustomTreePivotDataSet = /** @class */ (function (_super) {\r\n    __extends(CustomTreePivotDataSet, _super);\r\n    function CustomTreePivotDataSet() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    CustomTreePivotDataSet.prototype.getCellData = function (params) {\r\n        var query = params.query;\r\n        var _a = this.fields, columns = _a.columns, rows = _a.rows;\r\n        var rowDimensionValues = getQueryDimValues(rows, query);\r\n        var colDimensionValues = getQueryDimValues(columns, query);\r\n        var path = getDataPath({\r\n            rowDimensionValues: rowDimensionValues,\r\n            colDimensionValues: colDimensionValues,\r\n            rowPivotMeta: this.rowPivotMeta,\r\n            colPivotMeta: this.colPivotMeta,\r\n            isFirstCreate: true,\r\n            careUndefined: true,\r\n            rowFields: rows,\r\n            colFields: columns,\r\n        });\r\n        var data = get(this.indexesData, path);\r\n        return data;\r\n    };\r\n    CustomTreePivotDataSet.prototype.setDataCfg = function (dataCfg) {\r\n        _super.prototype.setDataCfg.call(this, dataCfg);\r\n        this.sortedDimensionValues = {};\r\n        this.rowPivotMeta = new Map();\r\n        this.colPivotMeta = new Map();\r\n        var _a = this.fields, rows = _a.rows, columns = _a.columns;\r\n        var indexesData = transformIndexesData({\r\n            rows: rows,\r\n            columns: columns,\r\n            originData: this.originData,\r\n            totalData: [],\r\n            indexesData: this.indexesData,\r\n            sortedDimensionValues: this.sortedDimensionValues,\r\n            rowPivotMeta: this.rowPivotMeta,\r\n            colPivotMeta: this.colPivotMeta,\r\n        }).indexesData;\r\n        this.indexesData = indexesData;\r\n        this.handleDimensionValuesSort();\r\n    };\r\n    CustomTreePivotDataSet.prototype.processDataCfg = function (dataCfg) {\r\n        // 自定义行头有如下几个特点\r\n        // 1、rows配置必须是空，需要额外添加 $$extra$$ 定位数据（标记指标的id）\r\n        // 2、要有配置 fields.rowCustomTree(行头结构)\r\n        // 3、values 不需要参与计算，默认就在行头结构中\r\n        dataCfg.fields.rows = [EXTRA_FIELD];\r\n        dataCfg.fields.valueInCols = false;\r\n        var data = dataCfg.data, restCfg = __rest(dataCfg, [\"data\"]);\r\n        var values = dataCfg.fields.values;\r\n        // 将源数据中的value值，映射为 $$extra$$,$$value$$\r\n        // {\r\n        // province: '四川',    province: '四川',\r\n        // city: '成都',   =>   city: '成都',\r\n        // price='11'           price='11'\r\n        //                      $$extra$$=price\r\n        //                      $$value$$=11\r\n        // 此时 province, city 均配置在columns里面\r\n        // }\r\n        var transformedData = [];\r\n        forEach(data, function (dataItem) {\r\n            if (isEmpty(intersection(keys(dataItem), values))) {\r\n                transformedData.push(dataItem);\r\n            }\r\n            else {\r\n                forEach(values, function (value) {\r\n                    var _a;\r\n                    if (has(dataItem, value)) {\r\n                        transformedData.push(__assign(__assign({}, dataItem), (_a = {}, _a[EXTRA_FIELD] = value, _a[VALUE_FIELD] = dataItem[value], _a)));\r\n                    }\r\n                });\r\n            }\r\n        });\r\n        return __assign({ data: uniq(transformedData) }, restCfg);\r\n    };\r\n    return CustomTreePivotDataSet;\r\n}(PivotDataSet));\r\nexport { CustomTreePivotDataSet };\r\n//# sourceMappingURL=custom-tree-pivot-data-set.js.map","references":["F:/Ismart/S2-master/node_modules/@types/lodash/index.d.ts","F:/Ismart/S2-master/packages/s2-core/src/data-set/pivot-data-set.ts","F:/Ismart/S2-master/packages/s2-core/src/data-set/interface.ts","F:/Ismart/S2-master/packages/s2-core/src/common/interface/index.ts","F:/Ismart/S2-master/packages/s2-core/src/common/constant/index.ts","F:/Ismart/S2-master/packages/s2-core/src/utils/dataset/pivot-data-set.ts"],"map":"{\"version\":3,\"file\":\"custom-tree-pivot-data-set.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/data-set/custom-tree-pivot-data-set.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"F:/Ismart/S2-master/packages/s2-core/node_modules/.cache/rollup-plugin-typescript2/placeholder/data-set/custom-tree-pivot-data-set.d.ts","writeByteOrderMark":false,"text":"import { PivotDataSet } from \"./pivot-data-set\";\r\nimport { CellDataParams, DataType } from \"./interface\";\r\nimport { S2DataConfig } from \"../common/interface\";\r\nexport declare class CustomTreePivotDataSet extends PivotDataSet {\r\n    getCellData(params: CellDataParams): DataType;\r\n    setDataCfg(dataCfg: S2DataConfig): void;\r\n    processDataCfg(dataCfg: S2DataConfig): S2DataConfig;\r\n}\r\n"}}
