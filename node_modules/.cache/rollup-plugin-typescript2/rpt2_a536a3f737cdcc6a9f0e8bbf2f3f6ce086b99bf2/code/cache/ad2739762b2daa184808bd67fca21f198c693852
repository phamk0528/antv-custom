{"code":"import { __read, __spreadArray, __values } from \"tslib\";\r\nimport { set, map, reduce, isUndefined, forEach, last } from 'lodash';\r\nimport { ROOT_ID, ID_SEPARATOR } from \"../../common/constant\";\r\n/**\r\n * Transform from origin single data to correct dimension values\r\n * data: {\r\n *  price: 16,\r\n *  province: '辽宁省',\r\n *  city: '芜湖市',\r\n *  category: '家具',\r\n *  subCategory: '椅子',\r\n * }\r\n * dimensions: [province, city]\r\n * return [辽宁省, 芜湖市]\r\n *\r\n * @param record\r\n * @param dimensions\r\n */\r\nexport function transformDimensionsValues(record, dimensions, sortedDimensionValues) {\r\n    var dimensionValuePath = [];\r\n    return map(dimensions, function (dimension) {\r\n        var _a;\r\n        var dimensionValue = record[dimension];\r\n        dimensionValuePath.push(\"\".concat(dimensionValue));\r\n        var cacheKey = dimensionValuePath.join(\"\".concat(ID_SEPARATOR));\r\n        if (!sortedDimensionValues[dimension]) {\r\n            sortedDimensionValues[dimension] = [cacheKey];\r\n        }\r\n        else if (!((_a = sortedDimensionValues[dimension]) === null || _a === void 0 ? void 0 : _a.includes(cacheKey))) {\r\n            sortedDimensionValues[dimension].push(cacheKey);\r\n        }\r\n        // 保证 undefined 之外的数据都为 string 类型\r\n        if (dimensionValue === undefined) {\r\n            return dimensionValue;\r\n        }\r\n        return \"\".concat(dimensionValue);\r\n    });\r\n}\r\n/**\r\n * Get dimensions without path pre\r\n * dimensions: ['辽宁省[&]芜湖市[&]家具[&]椅子']\r\n * return ['椅子']\r\n *\r\n * @param dimensions\r\n */\r\nexport function getDimensionsWithoutPathPre(dimensions) {\r\n    return dimensions.map(function (item) {\r\n        var splitArr = item === null || item === void 0 ? void 0 : item.split(ID_SEPARATOR);\r\n        return splitArr[(splitArr === null || splitArr === void 0 ? void 0 : splitArr.length) - 1] || item;\r\n    });\r\n}\r\n/**\r\n * Get dimensions with parent path\r\n * field: 'category'\r\n * defaultDimensions: ['province', 'city', 'category', 'subCategory']\r\n * dimensions: [\r\n *  {\r\n *   province: '辽宁省',\r\n *   city: '芜湖市',\r\n *   category: '家具',\r\n *   subCategory: '椅子',\r\n *   price: ''\r\n *  },\r\n * ]\r\n * return ['辽宁省[&]芜湖市[&]家具']\r\n *\r\n * @param field\r\n * @param defaultDimensions\r\n * @param dimensions\r\n */\r\nexport function getDimensionsWithParentPath(field, defaultDimensions, dimensions) {\r\n    var _a;\r\n    var measure = defaultDimensions.slice(0, defaultDimensions.indexOf(field) + 1);\r\n    return (_a = dimensions\r\n        .map(function (item) { return measure.map(function (i) { return item[i]; }).join(\"\".concat(ID_SEPARATOR)); })) === null || _a === void 0 ? void 0 : _a.filter(function (item) { return item; });\r\n}\r\n/**\r\n * Transform a single data to path\r\n * {\r\n * $$VALUE$$: 15\r\n * $$EXTRA$$: 'price'\r\n * \"price\": 15,\r\n * \"province\": \"辽宁省\",\r\n * \"city\": \"达州市\",\r\n * \"category\": \"家具\",\r\n * \"subCategory\": \"椅子\"\r\n * }\r\n * rows: [province, city]\r\n * columns: [category, subCategory, $$EXTRA$$]\r\n *\r\n * rowDimensionValues = [辽宁省, 达州市]\r\n * colDimensionValues = [家具, 椅子, price]\r\n *\r\n * @param params\r\n */\r\nexport function getDataPath(params) {\r\n    var rowDimensionValues = params.rowDimensionValues, colDimensionValues = params.colDimensionValues, careUndefined = params.careUndefined, isFirstCreate = params.isFirstCreate, rowFields = params.rowFields, colFields = params.colFields, rowPivotMeta = params.rowPivotMeta, colPivotMeta = params.colPivotMeta;\r\n    // 根据行、列维度值生成对应的 path路径，有两个情况\r\n    // 如果是汇总格子：path = [0,undefined, 0] path中会存在undefined的值（这里在indexesData里面会映射）\r\n    // 如果是明细格子: path = [0,0,0] 全数字，无undefined存在\r\n    var getPath = function (dimensionValues, isRow, rowMeta, colMeta) {\r\n        if (isRow === void 0) { isRow = true; }\r\n        var currentMeta = isRow ? rowMeta : colMeta;\r\n        var fields = isRow ? rowFields : colFields;\r\n        var path = [];\r\n        for (var i = 0; i < dimensionValues.length; i++) {\r\n            var value = dimensionValues[i];\r\n            if (!currentMeta.has(value)) {\r\n                if (isFirstCreate) {\r\n                    currentMeta.set(value, {\r\n                        level: currentMeta.size,\r\n                        children: new Map(),\r\n                    });\r\n                }\r\n                else {\r\n                    var meta_1 = currentMeta.get(value);\r\n                    if (meta_1) {\r\n                        path.push(meta_1.level);\r\n                    }\r\n                    if (!careUndefined) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            var meta = currentMeta.get(value);\r\n            if (isUndefined(value) && careUndefined) {\r\n                path.push(value);\r\n            }\r\n            else {\r\n                path.push(meta === null || meta === void 0 ? void 0 : meta.level);\r\n            }\r\n            if (meta) {\r\n                if (isFirstCreate) {\r\n                    // mark the child field\r\n                    meta.childField = fields === null || fields === void 0 ? void 0 : fields[i + 1];\r\n                }\r\n                currentMeta = meta === null || meta === void 0 ? void 0 : meta.children;\r\n            }\r\n        }\r\n        return path;\r\n    };\r\n    var rowPath = getPath(rowDimensionValues, true, rowPivotMeta, colPivotMeta);\r\n    var colPath = getPath(colDimensionValues, false, rowPivotMeta, colPivotMeta);\r\n    var result = rowPath.concat.apply(rowPath, __spreadArray([], __read(colPath), false));\r\n    return result;\r\n}\r\n/**\r\n * 获取查询结果中的纬度值\r\n * @param dimensions [province, city]\r\n * @param query { province: '四川省', city: '成都市', type: '办公用品' }\r\n * @returns ['四川省', '成都市']\r\n */\r\nexport function getQueryDimValues(dimensions, query) {\r\n    return reduce(dimensions, function (res, dimension) {\r\n        // push undefined when not exist\r\n        res.push(query[dimension]);\r\n        return res;\r\n    }, []);\r\n}\r\n/**\r\n * 转换原始数据为二维数组数据\r\n * @param rows\r\n * @param columns\r\n * @param originData\r\n * @param indexesData\r\n * @param totalData\r\n * @param sortedDimensionValues\r\n * @param rowPivotMeta\r\n * @param colPivotMeta\r\n */\r\nexport function transformIndexesData(params) {\r\n    var e_1, _a;\r\n    var rows = params.rows, columns = params.columns, _b = params.originData, originData = _b === void 0 ? [] : _b, _c = params.indexesData, indexesData = _c === void 0 ? [] : _c, _d = params.totalData, totalData = _d === void 0 ? [] : _d, sortedDimensionValues = params.sortedDimensionValues, rowPivotMeta = params.rowPivotMeta, colPivotMeta = params.colPivotMeta;\r\n    var paths = [];\r\n    try {\r\n        for (var _e = __values(__spreadArray(__spreadArray([], __read(originData), false), __read(totalData), false)), _f = _e.next(); !_f.done; _f = _e.next()) {\r\n            var data = _f.value;\r\n            var rowDimensionValues = transformDimensionsValues(data, rows, sortedDimensionValues);\r\n            var colDimensionValues = transformDimensionsValues(data, columns, sortedDimensionValues);\r\n            var path = getDataPath({\r\n                rowDimensionValues: rowDimensionValues,\r\n                colDimensionValues: colDimensionValues,\r\n                rowPivotMeta: rowPivotMeta,\r\n                colPivotMeta: colPivotMeta,\r\n                isFirstCreate: true,\r\n                careUndefined: (totalData === null || totalData === void 0 ? void 0 : totalData.length) > 0,\r\n                rowFields: rows,\r\n                colFields: columns,\r\n            });\r\n            paths.push(path);\r\n            set(indexesData, path, data);\r\n        }\r\n    }\r\n    catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n    finally {\r\n        try {\r\n            if (_f && !_f.done && (_a = _e.return)) _a.call(_e);\r\n        }\r\n        finally { if (e_1) throw e_1.error; }\r\n    }\r\n    return {\r\n        paths: paths,\r\n        indexesData: indexesData,\r\n        rowPivotMeta: rowPivotMeta,\r\n        colPivotMeta: colPivotMeta,\r\n        sortedDimensionValues: sortedDimensionValues,\r\n    };\r\n}\r\nexport function deleteMetaById(meta, nodeId) {\r\n    if (!meta || !nodeId)\r\n        return;\r\n    var paths = nodeId.split(ID_SEPARATOR);\r\n    var deletePath = last(paths);\r\n    var currentMeta = meta;\r\n    forEach(paths, function (path, idx) {\r\n        var pathMeta = currentMeta.get(path);\r\n        if (pathMeta) {\r\n            if (path === deletePath) {\r\n                pathMeta.children = new Map();\r\n                pathMeta.childField = undefined;\r\n            }\r\n            else {\r\n                currentMeta = pathMeta.children;\r\n            }\r\n            return true;\r\n        }\r\n        // exit iteration early when pathMeta not exists\r\n        return idx === 0 && path === ROOT_ID;\r\n    });\r\n}\r\n//# sourceMappingURL=pivot-data-set.js.map","references":["F:/Ismart/S2-master/node_modules/@types/lodash/index.d.ts","F:/Ismart/S2-master/packages/s2-core/src/data-set/interface.ts","F:/Ismart/S2-master/packages/s2-core/src/data-set/interface.ts","F:/Ismart/S2-master/packages/s2-core/src/common/constant/index.ts"],"map":"{\"version\":3,\"file\":\"pivot-data-set.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/utils/dataset/pivot-data-set.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"F:/Ismart/S2-master/packages/s2-core/node_modules/.cache/rollup-plugin-typescript2/placeholder/utils/dataset/pivot-data-set.d.ts","writeByteOrderMark":false,"text":"import { DataType } from \"../../data-set/interface\";\r\nimport { DataPathParams, PivotMeta, SortedDimensionValues } from \"../../data-set/interface\";\r\ninterface Param {\r\n    rows: string[];\r\n    columns: string[];\r\n    originData: DataType[];\r\n    indexesData: DataType[][] | DataType[];\r\n    totalData?: DataType[];\r\n    sortedDimensionValues: SortedDimensionValues;\r\n    rowPivotMeta?: PivotMeta;\r\n    colPivotMeta?: PivotMeta;\r\n}\r\n/**\r\n * Transform from origin single data to correct dimension values\r\n * data: {\r\n *  price: 16,\r\n *  province: '辽宁省',\r\n *  city: '芜湖市',\r\n *  category: '家具',\r\n *  subCategory: '椅子',\r\n * }\r\n * dimensions: [province, city]\r\n * return [辽宁省, 芜湖市]\r\n *\r\n * @param record\r\n * @param dimensions\r\n */\r\nexport declare function transformDimensionsValues(record: DataType, dimensions: string[], sortedDimensionValues: SortedDimensionValues): string[];\r\n/**\r\n * Get dimensions without path pre\r\n * dimensions: ['辽宁省[&]芜湖市[&]家具[&]椅子']\r\n * return ['椅子']\r\n *\r\n * @param dimensions\r\n */\r\nexport declare function getDimensionsWithoutPathPre(dimensions: string[]): string[];\r\n/**\r\n * Get dimensions with parent path\r\n * field: 'category'\r\n * defaultDimensions: ['province', 'city', 'category', 'subCategory']\r\n * dimensions: [\r\n *  {\r\n *   province: '辽宁省',\r\n *   city: '芜湖市',\r\n *   category: '家具',\r\n *   subCategory: '椅子',\r\n *   price: ''\r\n *  },\r\n * ]\r\n * return ['辽宁省[&]芜湖市[&]家具']\r\n *\r\n * @param field\r\n * @param defaultDimensions\r\n * @param dimensions\r\n */\r\nexport declare function getDimensionsWithParentPath(field: string, defaultDimensions: string[], dimensions: DataType[]): string[];\r\n/**\r\n * Transform a single data to path\r\n * {\r\n * $$VALUE$$: 15\r\n * $$EXTRA$$: 'price'\r\n * \"price\": 15,\r\n * \"province\": \"辽宁省\",\r\n * \"city\": \"达州市\",\r\n * \"category\": \"家具\",\r\n * \"subCategory\": \"椅子\"\r\n * }\r\n * rows: [province, city]\r\n * columns: [category, subCategory, $$EXTRA$$]\r\n *\r\n * rowDimensionValues = [辽宁省, 达州市]\r\n * colDimensionValues = [家具, 椅子, price]\r\n *\r\n * @param params\r\n */\r\nexport declare function getDataPath(params: DataPathParams): number[];\r\n/**\r\n * 获取查询结果中的纬度值\r\n * @param dimensions [province, city]\r\n * @param query { province: '四川省', city: '成都市', type: '办公用品' }\r\n * @returns ['四川省', '成都市']\r\n */\r\nexport declare function getQueryDimValues(dimensions: string[], query: DataType): string[];\r\n/**\r\n * 转换原始数据为二维数组数据\r\n * @param rows\r\n * @param columns\r\n * @param originData\r\n * @param indexesData\r\n * @param totalData\r\n * @param sortedDimensionValues\r\n * @param rowPivotMeta\r\n * @param colPivotMeta\r\n */\r\nexport declare function transformIndexesData(params: Param): {\r\n    paths: any[];\r\n    indexesData: DataType[];\r\n    rowPivotMeta: PivotMeta;\r\n    colPivotMeta: PivotMeta;\r\n    sortedDimensionValues: SortedDimensionValues;\r\n};\r\nexport declare function deleteMetaById(meta: PivotMeta, nodeId: string): void;\r\nexport {};\r\n"}}
