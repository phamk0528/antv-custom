{"code":"export var CellBorderPosition;\r\n(function (CellBorderPosition) {\r\n    CellBorderPosition[\"TOP\"] = \"TOP\";\r\n    CellBorderPosition[\"BOTTOM\"] = \"BOTTOM\";\r\n    CellBorderPosition[\"LEFT\"] = \"LEFT\";\r\n    CellBorderPosition[\"RIGHT\"] = \"RIGHT\";\r\n})(CellBorderPosition || (CellBorderPosition = {}));\r\nexport var Aggregation;\r\n(function (Aggregation) {\r\n    Aggregation[\"SUM\"] = \"SUM\";\r\n    Aggregation[\"MIN\"] = \"MIN\";\r\n    Aggregation[\"MAX\"] = \"MAX\";\r\n    Aggregation[\"AVG\"] = \"AVG\";\r\n})(Aggregation || (Aggregation = {}));\r\n//# sourceMappingURL=basic.js.map","references":["F:/Ismart/S2-master/node_modules/@antv/g-canvas/lib/index.d.ts","F:/Ismart/S2-master/packages/s2-core/src/common/interface/interaction.ts","F:/Ismart/S2-master/packages/s2-core/src/common/interface/s2DataConfig.ts","F:/Ismart/S2-master/packages/s2-core/src/facet/header/base.ts","F:/Ismart/S2-master/packages/s2-core/src/common/interface/index.ts","F:/Ismart/S2-master/packages/s2-core/src/common/interface/s2Options.ts","F:/Ismart/S2-master/packages/s2-core/src/data-set/index.ts","F:/Ismart/S2-master/packages/s2-core/src/facet/header/index.ts","F:/Ismart/S2-master/packages/s2-core/src/common/constant/index.ts","F:/Ismart/S2-master/packages/s2-core/src/common/interface/frame.ts","F:/Ismart/S2-master/packages/s2-core/src/facet/layout/hierarchy.ts","F:/Ismart/S2-master/packages/s2-core/src/facet/layout/node.ts","F:/Ismart/S2-master/packages/s2-core/src/sheet-type/index.ts","F:/Ismart/S2-master/packages/s2-core/src/common/interface/s2Options.ts"],"map":"{\"version\":3,\"file\":\"basic.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/common/interface/basic.ts\"],\"names\":[],\"mappings\":\"AAiCA,MAAM,CAAN,IAAY,kBAKX;AALD,WAAY,kBAAkB;IAC5B,iCAAW,CAAA;IACX,uCAAiB,CAAA;IACjB,mCAAa,CAAA;IACb,qCAAe,CAAA;AACjB,CAAC,EALW,kBAAkB,KAAlB,kBAAkB,QAK7B;AAsED,MAAM,CAAN,IAAY,WAKX;AALD,WAAY,WAAW;IACrB,0BAAW,CAAA;IACX,0BAAW,CAAA;IACX,0BAAW,CAAA;IACX,0BAAW,CAAA;AACb,CAAC,EALW,WAAW,KAAX,WAAW,QAKtB\"}","dts":{"name":"F:/Ismart/S2-master/packages/s2-core/node_modules/.cache/rollup-plugin-typescript2/placeholder/common/interface/basic.d.ts","writeByteOrderMark":false,"text":"import { Event, ShapeAttrs } from '@antv/g-canvas';\r\nimport { S2CellType } from './interaction';\r\nimport { DataItem, S2DataConfig } from './s2DataConfig';\r\nimport { BaseHeaderConfig } from \"../../facet/header/base\";\r\nimport { Condition, CustomTreeItem, Data, ResizeInfo } from \"./\";\r\nimport { S2BasicOptions } from \"./s2Options\";\r\nimport { BaseDataSet, DataType } from \"../../data-set\";\r\nimport { Frame } from \"../../facet/header\";\r\nimport { CellTypes } from \"../constant\";\r\nimport { FrameConfig } from \"./frame\";\r\nimport { Hierarchy } from \"../../facet/layout/hierarchy\";\r\nimport { Node } from \"../../facet/layout/node\";\r\nimport { SpreadSheet } from \"../../sheet-type\";\r\nimport { S2Options, S2TableSheetOptions } from \"./s2Options\";\r\nexport declare type Formatter = (v: unknown, data?: Data | Data[]) => string;\r\nexport interface FormatResult {\r\n    formattedValue: string;\r\n    value: DataItem;\r\n}\r\nexport declare type SortMethod = 'ASC' | 'DESC' | 'asc' | 'desc';\r\nexport declare enum CellBorderPosition {\r\n    TOP = \"TOP\",\r\n    BOTTOM = \"BOTTOM\",\r\n    LEFT = \"LEFT\",\r\n    RIGHT = \"RIGHT\"\r\n}\r\n/**\r\n * 布局类型：\r\n * adaptive: 行列等宽，均分整个 canvas 画布宽度\r\n * colAdaptive：列等宽，行头紧凑布局，列等分画布宽度减去行头宽度的剩余宽度\r\n * compact：行列紧凑布局，指标维度少的时候无法布满整个画布\r\n */\r\nexport declare type LayoutWidthType = 'adaptive' | 'colAdaptive' | 'compact';\r\nexport interface Meta {\r\n    readonly field?: string;\r\n    readonly name?: string;\r\n    readonly description?: string;\r\n    readonly formatter?: Formatter;\r\n}\r\n/**\r\n * Strategy mode's value type\r\n * data's key size must be equals fields.length\r\n * value can be empty\r\n * FieldC(Last fields is real value field)\r\n * example:\r\n * {\r\n *   fields: [fieldA, fieldB, fieldC],\r\n *   data: [\r\n *   {\r\n *     fieldA: 'valueA',\r\n *     fieldB: 'valueB',\r\n *     fieldC: 'valueC',\r\n *   }\r\n *   {\r\n *     fieldA: 'valueA',\r\n *     fieldB: '',\r\n *     fieldC: 'valueC',\r\n *   }\r\n *   ]\r\n * }\r\n */\r\nexport interface Extra {\r\n    key: string;\r\n    collapse: boolean;\r\n    remark: string;\r\n}\r\nexport interface Fields {\r\n    rows?: string[];\r\n    customTreeItems?: CustomTreeItem[];\r\n    columns?: string[];\r\n    values?: string[];\r\n    valueInCols?: boolean;\r\n    customValueOrder?: number;\r\n}\r\nexport interface TotalsStatus {\r\n    isRowTotal: boolean;\r\n    isRowSubTotal: boolean;\r\n    isColTotal: boolean;\r\n    isColSubTotal: boolean;\r\n}\r\nexport declare enum Aggregation {\r\n    SUM = \"SUM\",\r\n    MIN = \"MIN\",\r\n    MAX = \"MAX\",\r\n    AVG = \"AVG\"\r\n}\r\nexport interface CalcTotals {\r\n    aggregation?: Aggregation;\r\n    calcFunc?: (query: DataType, arr: DataType[]) => number;\r\n}\r\nexport interface Total {\r\n    /** 是否显示总计 */\r\n    showGrandTotals: boolean;\r\n    /** 是否显示小计 */\r\n    showSubTotals: boolean;\r\n    calcTotals?: CalcTotals;\r\n    calcSubTotals?: CalcTotals;\r\n    /** 小计的汇总维度 */\r\n    subTotalsDimensions: string[];\r\n    /** 总计布局位置，默认是下或右 */\r\n    reverseLayout: boolean;\r\n    /** 小计布局位置，默认下或者右 */\r\n    reverseSubLayout: boolean;\r\n    label?: string;\r\n    subLabel?: string;\r\n}\r\n/**\r\n * tableau的英文是这个，这里有个绕的概念\r\n * 如，某行维度需要展示小计，实际上是将对应的一列数据进行聚合，所以文案上显示的应该是“展示列小计”\r\n * 但是内部配置我倾向于仍然按照字段所属维度区，即配置的row，代表的是行维度而不是行小计\r\n */\r\nexport interface Totals {\r\n    readonly row?: Partial<Readonly<Total>>;\r\n    readonly col?: Partial<Readonly<Total>>;\r\n}\r\nexport interface Sort {\r\n    /** 字段id，业务中一般是displayId */\r\n    sortFieldId: string;\r\n    sortMethod?: SortMethod;\r\n    /** 自定义排序 */\r\n    sortBy?: string[];\r\n    /** 按照数值字段排序 */\r\n    sortByMeasure?: string;\r\n    /** 筛选条件，缩小排序范围 */\r\n    query?: Record<string, any>;\r\n    /** 组内排序用来显示icon */\r\n    type?: string;\r\n}\r\nexport interface SortFuncParam extends Sort {\r\n    data: Array<string | Record<string, any>>;\r\n}\r\nexport interface SortParam extends Sort {\r\n    /** 自定义func */\r\n    sortFunc?: (v: SortFuncParam) => Array<string | Record<string, any>>;\r\n}\r\nexport interface FilterParam {\r\n    filterKey: string;\r\n    filteredValues?: unknown[];\r\n    customFilter?: (row: DataType) => boolean;\r\n}\r\nexport declare type SortParams = SortParam[];\r\nexport interface Style {\r\n    readonly layoutWidthType?: LayoutWidthType;\r\n    readonly treeRowsWidth?: number;\r\n    readonly collapsedRows?: Record<string, boolean>;\r\n    readonly collapsedCols?: Record<string, boolean>;\r\n    readonly cellCfg?: CellCfg;\r\n    readonly colCfg?: ColCfg;\r\n    readonly rowCfg?: RowCfg;\r\n    readonly device?: 'pc' | 'mobile';\r\n}\r\nexport declare type Pagination = {\r\n    pageSize: number;\r\n    current: number;\r\n    total?: number;\r\n};\r\nexport interface CustomSVGIcon {\r\n    name: string;\r\n    svg: string;\r\n}\r\nexport interface HeaderActionIconProps {\r\n    iconName: string;\r\n    meta: Node;\r\n    event?: Event;\r\n}\r\nexport interface HeaderActionIcon {\r\n    iconNames: string[];\r\n    belongsCell: Omit<CellTypes, 'dataCell'>;\r\n    defaultHide?: boolean;\r\n    displayCondition?: (mete: Node) => boolean;\r\n    action: (headerActionIconProps: HeaderActionIconProps) => void;\r\n}\r\nexport declare type LayoutArrangeCallback = (spreadsheet: SpreadSheet, parent: Node, field: string, fieldValues: string[]) => string[];\r\nexport declare type LayoutCallback = (spreadsheet: SpreadSheet, rowNode: Node, colNode: Node) => void;\r\nexport declare type CellCallback<T extends BaseHeaderConfig> = (node: Node, spreadsheet: SpreadSheet, headerConfig: T) => S2CellType;\r\nexport declare type DataCellCallback = (viewMeta: ViewMeta) => S2CellType;\r\nexport declare type FrameCallback = (cfg: FrameConfig) => Frame;\r\nexport declare type CornerHeaderCallback = (parent: S2CellType, spreadsheet: SpreadSheet, ...restOptions: unknown[]) => void;\r\nexport declare type HierarchyResult = {\r\n    nodes: Node[];\r\n    push: boolean;\r\n};\r\nexport declare type HierarchyCallback = (spreadsheet: SpreadSheet, node: Node) => HierarchyResult;\r\nexport interface CellCfg {\r\n    width?: number;\r\n    height?: number;\r\n    valuesCfg?: {\r\n        originalValueField?: string;\r\n        widthPercentCfg?: number[];\r\n        conditions?: {\r\n            text: Condition;\r\n        };\r\n    };\r\n}\r\nexport interface RowCfg {\r\n    width?: number;\r\n    widthByField?: Record<string, number>;\r\n    heightByField?: Record<string, number>;\r\n    treeRowsWidth?: number;\r\n}\r\nexport interface ColCfg {\r\n    height?: number;\r\n    widthByFieldValue?: Record<string, number>;\r\n    heightByField?: Record<string, number>;\r\n    hideMeasureColumn?: boolean;\r\n}\r\n/**\r\n * the label names of rows or columns.\r\n * Using the ID_SEPARATOR('[&]') to join two labels\r\n * when there are hierarchical relations between them.\r\n */\r\nexport interface CustomHeaderCells {\r\n    cellLabels: string[];\r\n    mode?: 'pick' | 'omit';\r\n}\r\n/**\r\n * the index of rows or columns.\r\n */\r\nexport interface MergedCellInfo {\r\n    colIndex?: number;\r\n    rowIndex?: number;\r\n    showText?: boolean;\r\n}\r\n/**\r\n * the data cell and meta that make up the mergedCell, temporary use\r\n */\r\nexport declare type TempMergedCell = {\r\n    cells: S2CellType[];\r\n    viewMeta: ViewMeta;\r\n    isPartiallyVisible?: boolean;\r\n};\r\nexport declare type FilterDataItemCallback = (valueField: string, data: DataItem) => DataItem;\r\nexport declare type MappingDataItemCallback = (valueField: string, data: DataItem) => Record<string, string | number> | DataItem;\r\n/**\r\n * Spreadsheet facet config\r\n */\r\nexport interface SpreadSheetFacetCfg extends Fields, S2BasicOptions, S2TableSheetOptions, Style {\r\n    spreadsheet: SpreadSheet;\r\n    dataSet: BaseDataSet;\r\n    meta?: Meta[];\r\n}\r\nexport interface ViewMeta {\r\n    spreadsheet: SpreadSheet;\r\n    id: string;\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n    height: number;\r\n    data: Record<string, any>;\r\n    rowIndex: number;\r\n    colIndex: number;\r\n    valueField: string;\r\n    fieldValue: DataItem;\r\n    isTotals?: boolean;\r\n    rowQuery?: Record<string, any>;\r\n    colQuery?: Record<string, any>;\r\n    rowId?: string;\r\n    colId?: string;\r\n    field?: string;\r\n    [key: string]: any;\r\n}\r\nexport declare type ViewMetaIndexType = keyof Pick<ViewMeta, 'colIndex' | 'rowIndex'>;\r\nexport declare type GetCellMeta = (rowIndex?: number, colIndex?: number) => ViewMeta;\r\nexport interface LayoutResult {\r\n    colNodes: Node[];\r\n    colsHierarchy: Hierarchy;\r\n    rowNodes: Node[];\r\n    rowsHierarchy: Hierarchy;\r\n    rowLeafNodes: Node[];\r\n    colLeafNodes: Node[];\r\n    getCellMeta: GetCellMeta;\r\n    spreadsheet: SpreadSheet;\r\n}\r\nexport interface OffsetConfig {\r\n    offsetX?: {\r\n        value: number | undefined;\r\n        animate?: boolean;\r\n    };\r\n    offsetY?: {\r\n        value: number | undefined;\r\n        animate?: boolean;\r\n    };\r\n}\r\nexport interface CellAppendInfo<T = Node> extends Partial<ResizeInfo> {\r\n    isRowHeaderText?: boolean;\r\n    cellData?: T;\r\n}\r\nexport interface CellAttrs<T extends Record<string, unknown> = Node> extends ShapeAttrs {\r\n    text?: string;\r\n    appendInfo?: CellAppendInfo<T>;\r\n}\r\nexport declare type S2MountContainer = string | Element;\r\nexport declare type S2Constructor<T = Element | string> = [\r\n    S2MountContainer,\r\n    S2DataConfig,\r\n    S2Options<T>\r\n];\r\nexport interface OriginalEvent extends Event {\r\n    layerX: number;\r\n    layerY: number;\r\n}\r\nexport interface PartDrillDownDataCache {\r\n    rowId: string;\r\n    drillLevel: number;\r\n    drillField: string;\r\n    drillData: Record<string, string | number>[];\r\n}\r\nexport interface PartDrillDownFieldInLevel {\r\n    drillField: string;\r\n    drillLevel: number;\r\n}\r\nexport interface TableSortParam extends SortParam {\r\n    sortKey: string;\r\n}\r\n"}}
