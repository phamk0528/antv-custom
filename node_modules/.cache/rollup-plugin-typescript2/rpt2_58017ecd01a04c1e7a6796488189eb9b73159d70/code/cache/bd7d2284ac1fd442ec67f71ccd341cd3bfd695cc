{"code":"/**\r\n * Row and Column hierarchy to handle all contained nodes\r\n */\r\nvar Hierarchy = /** @class */ (function () {\r\n    function Hierarchy() {\r\n        // the full width contains all nodes\r\n        this.width = 0;\r\n        // the full height contains all nodes\r\n        this.height = 0;\r\n        // just a mark to get node from each level\r\n        this.maxLevel = -1;\r\n        // each level's first node\r\n        this.sampleNodesForAllLevels = [];\r\n        // last level's first node\r\n        this.sampleNodeForLastLevel = null;\r\n        // all nodes in this hierarchy\r\n        this.allNodesWithoutRoot = [];\r\n        // all nodes in the lastLevel\r\n        this.indexNode = [];\r\n    }\r\n    // get all leaf nodes\r\n    Hierarchy.prototype.getLeaves = function () {\r\n        return this.allNodesWithoutRoot.filter(function (value) { return value.isLeaf; });\r\n    };\r\n    /**\r\n     * Get all or level-related nodes in hierarchy\r\n     * @param level\r\n     */\r\n    Hierarchy.prototype.getNodes = function (level) {\r\n        if (level !== undefined) {\r\n            return this.allNodesWithoutRoot.filter(function (value) { return value.level === level; });\r\n        }\r\n        return this.allNodesWithoutRoot;\r\n    };\r\n    /**\r\n     * Get all or less than level-related nodes in hierarchy\r\n     * @param lessThanLevel\r\n     */\r\n    Hierarchy.prototype.getNodesLessThanLevel = function (lessThanLevel) {\r\n        return this.allNodesWithoutRoot.filter(function (value) { return value.level <= lessThanLevel; });\r\n    };\r\n    /**\r\n     * Add new node\r\n     * @param value\r\n     * @param insetIndex\r\n     */\r\n    Hierarchy.prototype.pushNode = function (value, insetIndex) {\r\n        if (insetIndex === void 0) { insetIndex = -1; }\r\n        if (insetIndex === -1) {\r\n            this.allNodesWithoutRoot.push(value);\r\n        }\r\n        else {\r\n            this.allNodesWithoutRoot.splice(insetIndex, 0, value);\r\n        }\r\n    };\r\n    Hierarchy.prototype.pushIndexNode = function (value) {\r\n        this.indexNode.push(value);\r\n    };\r\n    Hierarchy.prototype.getIndexNodes = function () {\r\n        return this.indexNode;\r\n    };\r\n    return Hierarchy;\r\n}());\r\nexport { Hierarchy };\r\n//# sourceMappingURL=hierarchy.js.map","references":["F:/Ismart/S2-master/packages/s2-core/src/facet/layout/node.ts"],"map":"{\"version\":3,\"file\":\"hierarchy.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/facet/layout/hierarchy.ts\"],\"names\":[],\"mappings\":\"AAGA;;GAEG;AACH;IAAA;QAIE,oCAAoC;QAC7B,UAAK,GAAG,CAAC,CAAC;QAEjB,qCAAqC;QAC9B,WAAM,GAAG,CAAC,CAAC;QAElB,0CAA0C;QACnC,aAAQ,GAAG,CAAC,CAAC,CAAC;QAErB,0BAA0B;QACnB,4BAAuB,GAAY,EAAE,CAAC;QAE7C,0BAA0B;QACnB,2BAAsB,GAAU,IAAI,CAAC;QAE5C,8BAA8B;QACtB,wBAAmB,GAAW,EAAE,CAAC;QAEzC,6BAA6B;QACrB,cAAS,GAAW,EAAE,CAAC;IAgDjC,CAAC;IA9CC,qBAAqB;IACd,6BAAS,GAAhB;QACE,OAAO,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,UAAC,KAAK,IAAK,OAAA,KAAK,CAAC,MAAM,EAAZ,CAAY,CAAC,CAAC;IAClE,CAAC;IAED;;;OAGG;IACI,4BAAQ,GAAf,UAAgB,KAAc;QAC5B,IAAI,KAAK,KAAK,SAAS,EAAE;YACvB,OAAO,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,UAAC,KAAK,IAAK,OAAA,KAAK,CAAC,KAAK,KAAK,KAAK,EAArB,CAAqB,CAAC,CAAC;SAC1E;QACD,OAAO,IAAI,CAAC,mBAAmB,CAAC;IAClC,CAAC;IAED;;;OAGG;IACI,yCAAqB,GAA5B,UAA6B,aAAqB;QAChD,OAAO,IAAI,CAAC,mBAAmB,CAAC,MAAM,CACpC,UAAC,KAAK,IAAK,OAAA,KAAK,CAAC,KAAK,IAAI,aAAa,EAA5B,CAA4B,CACxC,CAAC;IACJ,CAAC;IAED;;;;OAIG;IACI,4BAAQ,GAAf,UAAgB,KAAW,EAAE,UAAe;QAAf,2BAAA,EAAA,cAAc,CAAC;QAC1C,IAAI,UAAU,KAAK,CAAC,CAAC,EAAE;YACrB,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACtC;aAAM;YACL,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC;SACvD;IACH,CAAC;IAEM,iCAAa,GAApB,UAAqB,KAAW;QAC9B,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC7B,CAAC;IAEM,iCAAa,GAApB;QACE,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IACH,gBAAC;AAAD,CAAC,AAvED,IAuEC\"}"}
